import { jsxs, jsx, Fragment } from 'react/jsx-runtime';
import React, { forwardRef, cloneElement, useState, useEffect, createRef, useRef, useImperativeHandle, useMemo, useContext } from 'react';

function _extends$1() {
  _extends$1 = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends$1.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function toVal(mix) {
	var k, y, str='';

	if (typeof mix === 'string' || typeof mix === 'number') {
		str += mix;
	} else if (typeof mix === 'object') {
		if (Array.isArray(mix)) {
			for (k=0; k < mix.length; k++) {
				if (mix[k]) {
					if (y = toVal(mix[k])) {
						str && (str += ' ');
						str += y;
					}
				}
			}
		} else {
			for (k in mix) {
				if (mix[k]) {
					str && (str += ' ');
					str += k;
				}
			}
		}
	}

	return str;
}

function clsx () {
	var i=0, tmp, x, str='';
	while (i < arguments.length) {
		if (tmp = arguments[i++]) {
			if (x = toVal(tmp)) {
				str && (str += ' ');
				str += x;
			}
		}
	}
	return str;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var hashlru = function (max) {

  if (!max) throw Error('hashlru must have a max value, of type number, greater than 0')

  var size = 0, cache = Object.create(null), _cache = Object.create(null);

  function update (key, value) {
    cache[key] = value;
    size ++;
    if(size >= max) {
      size = 0;
      _cache = cache;
      cache = Object.create(null);
    }
  }

  return {
    has: function (key) {
      return cache[key] !== undefined || _cache[key] !== undefined
    },
    remove: function (key) {
      if(cache[key] !== undefined)
        cache[key] = undefined;
      if(_cache[key] !== undefined)
        _cache[key] = undefined;
    },
    get: function (key) {
      var v = cache[key];
      if(v !== undefined) return v
      if((v = _cache[key]) !== undefined) {
        update(key, v);
        return v
      }
    },
    set: function (key, value) {
      if(cache[key] !== undefined) cache[key] = value;
      else update(key, value);
    },
    clear: function () {
      cache = Object.create(null);
      _cache = Object.create(null);
    }
  }
};

var HLRU = hashlru;

function getLruCache(cacheSize) {
  if (cacheSize >= 1) {
    return HLRU(cacheSize);
  }

  return {
    get: function get() {
      return undefined;
    },
    set: function set() {}
  };
}

var CLASS_PART_SEPARATOR = '-';
function createClassUtils(config) {
  var classMap = createClassMap(config);

  function getClassGroupId(className) {
    var classParts = className.split(CLASS_PART_SEPARATOR); // Classes like `-inset-1` produce an empty string as first classPart. We assume that classes for negative values are used correctly and remove it from classParts.

    if (classParts[0] === '' && classParts.length !== 1) {
      classParts.shift();
    }

    return getGroupRecursive(classParts, classMap) || getGroupIdForArbitraryProperty(className);
  }

  function getConflictingClassGroupIds(classGroupId) {
    return config.conflictingClassGroups[classGroupId] || [];
  }

  return {
    getClassGroupId: getClassGroupId,
    getConflictingClassGroupIds: getConflictingClassGroupIds
  };
}

function getGroupRecursive(classParts, classPartObject) {
  var _classPartObject$vali;

  if (classParts.length === 0) {
    return classPartObject.classGroupId;
  }

  var currentClassPart = classParts[0];
  var nextClassPartObject = classPartObject.nextPart[currentClassPart];
  var classGroupFromNextClassPart = nextClassPartObject ? getGroupRecursive(classParts.slice(1), nextClassPartObject) : undefined;

  if (classGroupFromNextClassPart) {
    return classGroupFromNextClassPart;
  }

  if (classPartObject.validators.length === 0) {
    return undefined;
  }

  var classRest = classParts.join(CLASS_PART_SEPARATOR);
  return (_classPartObject$vali = classPartObject.validators.find(function (_ref) {
    var validator = _ref.validator;
    return validator(classRest);
  })) == null ? void 0 : _classPartObject$vali.classGroupId;
}

var arbitraryPropertyRegex = /^\[(.+)\]$/;

function getGroupIdForArbitraryProperty(className) {
  if (arbitraryPropertyRegex.test(className)) {
    var arbitraryPropertyClassName = arbitraryPropertyRegex.exec(className)[1];
    var property = arbitraryPropertyClassName == null ? void 0 : arbitraryPropertyClassName.substring(0, arbitraryPropertyClassName.indexOf(':'));

    if (property) {
      // I use two dots here because one dot is used as prefix for class groups in plugins
      return 'arbitrary..' + property;
    }
  }
}
/**
 * Exported for testing only
 */


function createClassMap(config) {
  var theme = config.theme,
      prefix = config.prefix;
  var classMap = {
    nextPart: {},
    validators: []
  };
  var prefixedClassGroupEntries = getPrefixedClassGroupEntries(Object.entries(config.classGroups), prefix);
  prefixedClassGroupEntries.forEach(function (_ref2) {
    var classGroupId = _ref2[0],
        classGroup = _ref2[1];
    processClassesRecursively(classGroup, classMap, classGroupId, theme);
  });
  return classMap;
}

function processClassesRecursively(classGroup, classPartObject, classGroupId, theme) {
  classGroup.forEach(function (classDefinition) {
    if (typeof classDefinition === 'string') {
      var classPartObjectToEdit = classDefinition === '' ? classPartObject : getPart(classPartObject, classDefinition);
      classPartObjectToEdit.classGroupId = classGroupId;
      return;
    }

    if (typeof classDefinition === 'function') {
      if (isThemeGetter(classDefinition)) {
        processClassesRecursively(classDefinition(theme), classPartObject, classGroupId, theme);
        return;
      }

      classPartObject.validators.push({
        validator: classDefinition,
        classGroupId: classGroupId
      });
      return;
    }

    Object.entries(classDefinition).forEach(function (_ref3) {
      var key = _ref3[0],
          classGroup = _ref3[1];
      processClassesRecursively(classGroup, getPart(classPartObject, key), classGroupId, theme);
    });
  });
}

function getPart(classPartObject, path) {
  var currentClassPartObject = classPartObject;
  path.split(CLASS_PART_SEPARATOR).forEach(function (pathPart) {
    if (currentClassPartObject.nextPart[pathPart] === undefined) {
      currentClassPartObject.nextPart[pathPart] = {
        nextPart: {},
        validators: []
      };
    }

    currentClassPartObject = currentClassPartObject.nextPart[pathPart];
  });
  return currentClassPartObject;
}

function isThemeGetter(func) {
  return func.isThemeGetter;
}

function getPrefixedClassGroupEntries(classGroupEntries, prefix) {
  if (!prefix) {
    return classGroupEntries;
  }

  return classGroupEntries.map(function (_ref4) {
    var classGroupId = _ref4[0],
        classGroup = _ref4[1];
    var prefixedClassGroup = classGroup.map(function (classDefinition) {
      if (typeof classDefinition === 'string') {
        return prefix + classDefinition;
      }

      if (typeof classDefinition === 'object') {
        return Object.fromEntries(Object.entries(classDefinition).map(function (_ref5) {
          var key = _ref5[0],
              value = _ref5[1];
          return [prefix + key, value];
        }));
      }

      return classDefinition;
    });
    return [classGroupId, prefixedClassGroup];
  });
}

function createConfigUtils(config) {
  return _extends({
    cache: getLruCache(config.cacheSize)
  }, createClassUtils(config));
}

var SPLIT_CLASSES_REGEX = /\s+/;
var IMPORTANT_MODIFIER = '!'; // Regex is needed so we don't match against colons in labels for arbitrary values like `text-[color:var(--mystery-var)]`
// I'd prefer to use a negative lookbehind for all supported labels, but lookbheinds don't have good browser support yet. More info: https://caniuse.com/js-regexp-lookbehind

var MODIFIER_SEPARATOR_REGEX = /:(?![^[]*\])/;
var MODIFIER_SEPARATOR = ':';
function mergeClassList(classList, configUtils) {
  var getClassGroupId = configUtils.getClassGroupId,
      getConflictingClassGroupIds = configUtils.getConflictingClassGroupIds;
  /**
   * Set of classGroupIds in following format:
   * `{importantModifier}{variantModifiers}{classGroupId}`
   * @example 'float'
   * @example 'hover:focus:bg-color'
   * @example '!md:pr'
   */

  var classGroupsInConflict = new Set();
  return classList.trim().split(SPLIT_CLASSES_REGEX).map(function (originalClassName) {
    var modifiers = originalClassName.split(MODIFIER_SEPARATOR_REGEX);
    var classNameWithImportantModifier = modifiers.pop();
    var hasImportantModifier = classNameWithImportantModifier.startsWith(IMPORTANT_MODIFIER);
    var className = hasImportantModifier ? classNameWithImportantModifier.substring(1) : classNameWithImportantModifier;
    var classGroupId = getClassGroupId(className);

    if (!classGroupId) {
      return {
        isTailwindClass: false,
        originalClassName: originalClassName
      };
    }

    var variantModifier = modifiers.length === 0 ? '' : modifiers.sort().concat('').join(MODIFIER_SEPARATOR);
    var fullModifier = hasImportantModifier ? IMPORTANT_MODIFIER + variantModifier : variantModifier;
    return {
      isTailwindClass: true,
      modifier: fullModifier,
      classGroupId: classGroupId,
      originalClassName: originalClassName
    };
  }).reverse() // Last class in conflict wins, so we need to filter conflicting classes in reverse order.
  .filter(function (parsed) {
    if (!parsed.isTailwindClass) {
      return true;
    }

    var modifier = parsed.modifier,
        classGroupId = parsed.classGroupId;
    var classId = modifier + ":" + classGroupId;

    if (classGroupsInConflict.has(classId)) {
      return false;
    }

    classGroupsInConflict.add(classId);
    getConflictingClassGroupIds(classGroupId).forEach(function (group) {
      return classGroupsInConflict.add(modifier + ":" + group);
    });
    return true;
  }).reverse().map(function (parsed) {
    return parsed.originalClassName;
  }).join(' ');
}

function createTailwindMerge() {
  for (var _len = arguments.length, createConfig = new Array(_len), _key = 0; _key < _len; _key++) {
    createConfig[_key] = arguments[_key];
  }

  var configUtils;
  var cacheGet;
  var cacheSet;
  var functionToCall = initTailwindMerge;

  function initTailwindMerge(classList) {
    var firstCreateConfig = createConfig[0],
        restCreateConfig = createConfig.slice(1);
    var config = restCreateConfig.reduce(function (previousConfig, createConfigCurrent) {
      return createConfigCurrent(previousConfig);
    }, firstCreateConfig());
    configUtils = createConfigUtils(config);
    cacheGet = configUtils.cache.get;
    cacheSet = configUtils.cache.set;
    functionToCall = tailwindMerge;
    return tailwindMerge(classList);
  }

  function tailwindMerge(classList) {
    var cachedResult = cacheGet(classList);

    if (cachedResult) {
      return cachedResult;
    }

    var result = mergeClassList(classList, configUtils);
    cacheSet(classList, result);
    return result;
  }

  return function callTailwindMerge() {
    var classList = '';
    var temp; // Credits → https://github.com/lukeed/clsx/blob/v1.1.1/src/index.js

    for (var index = 0; index < arguments.length; index += 1) {
      if (temp = arguments[index]) {
        classList && (classList += ' ');
        classList += temp;
      }
    }

    return functionToCall(classList);
  };
}

function fromTheme(key) {
  var themeGetter = function themeGetter(theme) {
    return theme[key] || [];
  };

  themeGetter.isThemeGetter = true;
  return themeGetter;
}

var arbitraryValueRegex = /^\[(.+)\]$/;
var fractionRegex = /^\d+\/\d+$/;
var stringLengths = /*#__PURE__*/new Set(['px', 'full', 'screen']);
var tshirtUnitRegex = /^(\d+)?(xs|sm|md|lg|xl)$/;
var lengthUnitRegex = /\d+(%|px|em|rem|vh|vw|pt|pc|in|cm|mm|cap|ch|ex|lh|rlh|vi|vb|vmin|vmax)/; // Shadow always begins with x and y offset separated by underscore

var shadowRegex = /^-?((\d+)?\.?(\d+)[a-z]+|0)_-?((\d+)?\.?(\d+)[a-z]+|0)/;
function isLength(classPart) {
  return !Number.isNaN(Number(classPart)) || stringLengths.has(classPart) || fractionRegex.test(classPart) || isArbitraryLength(classPart);
}
function isArbitraryLength(classPart) {
  var _arbitraryValueRegex$;

  var arbitraryValue = (_arbitraryValueRegex$ = arbitraryValueRegex.exec(classPart)) == null ? void 0 : _arbitraryValueRegex$[1];

  if (arbitraryValue) {
    return arbitraryValue.startsWith('length:') || lengthUnitRegex.test(arbitraryValue);
  }

  return false;
}
function isArbitrarySize(classPart) {
  var _arbitraryValueRegex$2;

  var arbitraryValue = (_arbitraryValueRegex$2 = arbitraryValueRegex.exec(classPart)) == null ? void 0 : _arbitraryValueRegex$2[1];
  return arbitraryValue ? arbitraryValue.startsWith('size:') : false;
}
function isArbitraryPosition(classPart) {
  var _arbitraryValueRegex$3;

  var arbitraryValue = (_arbitraryValueRegex$3 = arbitraryValueRegex.exec(classPart)) == null ? void 0 : _arbitraryValueRegex$3[1];
  return arbitraryValue ? arbitraryValue.startsWith('position:') : false;
}
function isArbitraryUrl(classPart) {
  var _arbitraryValueRegex$4;

  var arbitraryValue = (_arbitraryValueRegex$4 = arbitraryValueRegex.exec(classPart)) == null ? void 0 : _arbitraryValueRegex$4[1];
  return arbitraryValue ? arbitraryValue.startsWith('url(') || arbitraryValue.startsWith('url:') : false;
}
function isArbitraryWeight(classPart) {
  var _arbitraryValueRegex$5;

  var arbitraryValue = (_arbitraryValueRegex$5 = arbitraryValueRegex.exec(classPart)) == null ? void 0 : _arbitraryValueRegex$5[1];
  return arbitraryValue ? !Number.isNaN(Number(arbitraryValue)) || arbitraryValue.startsWith('weight:') : false;
}
function isInteger(classPart) {
  var _arbitraryValueRegex$6;

  var arbitraryValue = (_arbitraryValueRegex$6 = arbitraryValueRegex.exec(classPart)) == null ? void 0 : _arbitraryValueRegex$6[1];

  if (arbitraryValue) {
    return Number.isInteger(Number(arbitraryValue));
  }

  return Number.isInteger(Number(classPart));
}
function isArbitraryValue(classPart) {
  return arbitraryValueRegex.test(classPart);
}
function isAny() {
  return true;
}
function isTshirtSize(classPart) {
  return tshirtUnitRegex.test(classPart);
}
function isArbitraryShadow(classPart) {
  var _arbitraryValueRegex$7;

  var arbitraryValue = (_arbitraryValueRegex$7 = arbitraryValueRegex.exec(classPart)) == null ? void 0 : _arbitraryValueRegex$7[1];

  if (arbitraryValue) {
    return shadowRegex.test(arbitraryValue);
  }

  return false;
}

function getDefaultConfig() {
  var colors = fromTheme('colors');
  var spacing = fromTheme('spacing');
  var blur = fromTheme('blur');
  var brightness = fromTheme('brightness');
  var borderColor = fromTheme('borderColor');
  var borderRadius = fromTheme('borderRadius');
  var borderWidth = fromTheme('borderWidth');
  var contrast = fromTheme('contrast');
  var grayscale = fromTheme('grayscale');
  var hueRotate = fromTheme('hueRotate');
  var invert = fromTheme('invert');
  var gap = fromTheme('gap');
  var gradientColorStops = fromTheme('gradientColorStops');
  var inset = fromTheme('inset');
  var margin = fromTheme('margin');
  var opacity = fromTheme('opacity');
  var padding = fromTheme('padding');
  var saturate = fromTheme('saturate');
  var scale = fromTheme('scale');
  var sepia = fromTheme('sepia');
  var skew = fromTheme('skew');
  var space = fromTheme('space');
  var translate = fromTheme('translate');

  var getOverscroll = function getOverscroll() {
    return ['auto', 'contain', 'none'];
  };

  var getOverflow = function getOverflow() {
    return ['auto', 'hidden', 'clip', 'visible', 'scroll'];
  };

  var getSpacingWithAuto = function getSpacingWithAuto() {
    return ['auto', spacing];
  };

  var getLengthWithEmpty = function getLengthWithEmpty() {
    return ['', isLength];
  };

  var getIntegerWithAuto = function getIntegerWithAuto() {
    return ['auto', isInteger];
  };

  var getPositions = function getPositions() {
    return ['bottom', 'center', 'left', 'left-bottom', 'left-top', 'right', 'right-bottom', 'right-top', 'top'];
  };

  var getLineStyles = function getLineStyles() {
    return ['solid', 'dashed', 'dotted', 'double', 'none'];
  };

  var getBlendModes = function getBlendModes() {
    return ['normal', 'multiply', 'screen', 'overlay', 'darken', 'lighten', 'color-dodge', 'color-burn', 'hard-light', 'soft-light', 'difference', 'exclusion', 'hue', 'saturation', 'color', 'luminosity'];
  };

  var getAlign = function getAlign() {
    return ['start', 'end', 'center', 'between', 'around', 'evenly'];
  };

  var getZeroAndEmpty = function getZeroAndEmpty() {
    return ['', '0', isArbitraryValue];
  };

  var getBreaks = function getBreaks() {
    return ['auto', 'avoid', 'all', 'avoid-page', 'page', 'left', 'right', 'column'];
  };

  return {
    cacheSize: 500,
    theme: {
      colors: [isAny],
      spacing: [isLength],
      blur: ['none', '', isTshirtSize, isArbitraryLength],
      brightness: [isInteger],
      borderColor: [colors],
      borderRadius: ['none', '', 'full', isTshirtSize, isArbitraryLength],
      borderWidth: getLengthWithEmpty(),
      contrast: [isInteger],
      grayscale: getZeroAndEmpty(),
      hueRotate: [isInteger],
      invert: getZeroAndEmpty(),
      gap: [spacing],
      gradientColorStops: [colors],
      inset: getSpacingWithAuto(),
      margin: getSpacingWithAuto(),
      opacity: [isInteger],
      padding: [spacing],
      saturate: [isInteger],
      scale: [isInteger],
      sepia: getZeroAndEmpty(),
      skew: [isInteger, isArbitraryValue],
      space: [spacing],
      translate: [spacing]
    },
    classGroups: {
      // Layout

      /**
       * Aspect Ratio
       * @see https://tailwindcss.com/docs/aspect-ratio
       */
      aspect: [{
        aspect: ['auto', 'square', 'video', isArbitraryValue]
      }],

      /**
       * Container
       * @see https://tailwindcss.com/docs/container
       */
      container: ['container'],

      /**
       * Columns
       * @see https://tailwindcss.com/docs/columns
       */
      columns: [{
        columns: [isTshirtSize]
      }],

      /**
       * Break After
       * @see https://tailwindcss.com/docs/break-after
       */
      'break-after': [{
        'break-after': getBreaks()
      }],

      /**
       * Break Before
       * @see https://tailwindcss.com/docs/break-before
       */
      'break-before': [{
        'break-before': getBreaks()
      }],

      /**
       * Break Inside
       * @see https://tailwindcss.com/docs/break-inside
       */
      'break-inside': [{
        'break-inside': ['auto', 'avoid', 'avoid-page', 'avoid-column']
      }],

      /**
       * Box Decoration Break
       * @see https://tailwindcss.com/docs/box-decoration-break
       */
      'box-decoration': [{
        'box-decoration': ['slice', 'clone']
      }],

      /**
       * Box Sizing
       * @see https://tailwindcss.com/docs/box-sizing
       */
      box: [{
        box: ['border', 'content']
      }],

      /**
       * Display
       * @see https://tailwindcss.com/docs/display
       */
      display: ['block', 'inline-block', 'inline', 'flex', 'inline-flex', 'table', 'inline-table', 'table-caption', 'table-cell', 'table-column', 'table-column-group', 'table-footer-group', 'table-header-group', 'table-row-group', 'table-row', 'flow-root', 'grid', 'inline-grid', 'contents', 'list-item', 'hidden'],

      /**
       * Floats
       * @see https://tailwindcss.com/docs/float
       */
      "float": [{
        "float": ['right', 'left', 'none']
      }],

      /**
       * Clear
       * @see https://tailwindcss.com/docs/clear
       */
      clear: [{
        clear: ['left', 'right', 'both', 'none']
      }],

      /**
       * Isolation
       * @see https://tailwindcss.com/docs/isolation
       */
      isolation: ['isolate', 'isolation-auto'],

      /**
       * Object Fit
       * @see https://tailwindcss.com/docs/object-fit
       */
      'object-fit': [{
        object: ['contain', 'cover', 'fill', 'none', 'scale-down']
      }],

      /**
       * Object Position
       * @see https://tailwindcss.com/docs/object-position
       */
      'object-position': [{
        object: [].concat(getPositions(), [isArbitraryValue])
      }],

      /**
       * Overflow
       * @see https://tailwindcss.com/docs/overflow
       */
      overflow: [{
        overflow: getOverflow()
      }],

      /**
       * Overflow X
       * @see https://tailwindcss.com/docs/overflow
       */
      'overflow-x': [{
        'overflow-x': getOverflow()
      }],

      /**
       * Overflow Y
       * @see https://tailwindcss.com/docs/overflow
       */
      'overflow-y': [{
        'overflow-y': getOverflow()
      }],

      /**
       * Overscroll Behavior
       * @see https://tailwindcss.com/docs/overscroll-behavior
       */
      overscroll: [{
        overscroll: getOverscroll()
      }],

      /**
       * Overscroll Behavior X
       * @see https://tailwindcss.com/docs/overscroll-behavior
       */
      'overscroll-x': [{
        'overscroll-x': getOverscroll()
      }],

      /**
       * Overscroll Behavior Y
       * @see https://tailwindcss.com/docs/overscroll-behavior
       */
      'overscroll-y': [{
        'overscroll-y': getOverscroll()
      }],

      /**
       * Position
       * @see https://tailwindcss.com/docs/position
       */
      position: ['static', 'fixed', 'absolute', 'relative', 'sticky'],

      /**
       * Top / Right / Bottom / Left
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      inset: [{
        inset: [inset]
      }],

      /**
       * Right / Left
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      'inset-x': [{
        'inset-x': [inset]
      }],

      /**
       * Top / Bottom
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      'inset-y': [{
        'inset-y': [inset]
      }],

      /**
       * Top
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      top: [{
        top: [inset]
      }],

      /**
       * Right
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      right: [{
        right: [inset]
      }],

      /**
       * Bottom
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      bottom: [{
        bottom: [inset]
      }],

      /**
       * Left
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      left: [{
        left: [inset]
      }],

      /**
       * Visibility
       * @see https://tailwindcss.com/docs/visibility
       */
      visibility: ['visible', 'invisible'],

      /**
       * Z-Index
       * @see https://tailwindcss.com/docs/z-index
       */
      z: [{
        z: [isLength]
      }],
      // Flexbox and Grid

      /**
       * Flex Basis
       * @see https://tailwindcss.com/docs/flex-basis
       */
      basis: [{
        basis: [spacing]
      }],

      /**
       * Flex Direction
       * @see https://tailwindcss.com/docs/flex-direction
       */
      'flex-direction': [{
        flex: ['row', 'row-reverse', 'col', 'col-reverse']
      }],

      /**
       * Flex Wrap
       * @see https://tailwindcss.com/docs/flex-wrap
       */
      'flex-wrap': [{
        flex: ['wrap', 'wrap-reverse', 'nowrap']
      }],

      /**
       * Flex
       * @see https://tailwindcss.com/docs/flex
       */
      flex: [{
        flex: ['1', 'auto', 'initial', 'none', isArbitraryValue]
      }],

      /**
       * Flex Grow
       * @see https://tailwindcss.com/docs/flex-grow
       */
      grow: [{
        grow: getZeroAndEmpty()
      }],

      /**
       * Flex Shrink
       * @see https://tailwindcss.com/docs/flex-shrink
       */
      shrink: [{
        shrink: getZeroAndEmpty()
      }],

      /**
       * Order
       * @see https://tailwindcss.com/docs/order
       */
      order: [{
        order: ['first', 'last', 'none', isInteger]
      }],

      /**
       * Grid Template Columns
       * @see https://tailwindcss.com/docs/grid-template-columns
       */
      'grid-cols': [{
        'grid-cols': [isAny]
      }],

      /**
       * Grid Column Start / End
       * @see https://tailwindcss.com/docs/grid-column
       */
      'col-start-end': [{
        col: ['auto', {
          span: [isInteger]
        }]
      }],

      /**
       * Grid Column Start
       * @see https://tailwindcss.com/docs/grid-column
       */
      'col-start': [{
        'col-start': getIntegerWithAuto()
      }],

      /**
       * Grid Column End
       * @see https://tailwindcss.com/docs/grid-column
       */
      'col-end': [{
        'col-end': getIntegerWithAuto()
      }],

      /**
       * Grid Template Rows
       * @see https://tailwindcss.com/docs/grid-template-rows
       */
      'grid-rows': [{
        'grid-rows': [isAny]
      }],

      /**
       * Grid Row Start / End
       * @see https://tailwindcss.com/docs/grid-row
       */
      'row-start-end': [{
        row: ['auto', {
          span: [isInteger]
        }]
      }],

      /**
       * Grid Row Start
       * @see https://tailwindcss.com/docs/grid-row
       */
      'row-start': [{
        'row-start': getIntegerWithAuto()
      }],

      /**
       * Grid Row End
       * @see https://tailwindcss.com/docs/grid-row
       */
      'row-end': [{
        'row-end': getIntegerWithAuto()
      }],

      /**
       * Grid Auto Flow
       * @see https://tailwindcss.com/docs/grid-auto-flow
       */
      'grid-flow': [{
        'grid-flow': ['row', 'col', 'row-dense', 'col-dense']
      }],

      /**
       * Grid Auto Columns
       * @see https://tailwindcss.com/docs/grid-auto-columns
       */
      'auto-cols': [{
        'auto-cols': ['auto', 'min', 'max', 'fr', isArbitraryValue]
      }],

      /**
       * Grid Auto Rows
       * @see https://tailwindcss.com/docs/grid-auto-rows
       */
      'auto-rows': [{
        'auto-rows': ['auto', 'min', 'max', 'fr', isArbitraryValue]
      }],

      /**
       * Gap
       * @see https://tailwindcss.com/docs/gap
       */
      gap: [{
        gap: [gap]
      }],

      /**
       * Gap X
       * @see https://tailwindcss.com/docs/gap
       */
      'gap-x': [{
        'gap-x': [gap]
      }],

      /**
       * Gap Y
       * @see https://tailwindcss.com/docs/gap
       */
      'gap-y': [{
        'gap-y': [gap]
      }],

      /**
       * Justify Content
       * @see https://tailwindcss.com/docs/justify-content
       */
      'justify-content': [{
        justify: getAlign()
      }],

      /**
       * Justify Items
       * @see https://tailwindcss.com/docs/justify-items
       */
      'justify-items': [{
        'justify-items': ['start', 'end', 'center', 'stretch']
      }],

      /**
       * Justify Self
       * @see https://tailwindcss.com/docs/justify-self
       */
      'justify-self': [{
        'justify-self': ['auto', 'start', 'end', 'center', 'stretch']
      }],

      /**
       * Align Content
       * @see https://tailwindcss.com/docs/align-content
       */
      'align-content': [{
        content: getAlign()
      }],

      /**
       * Align Items
       * @see https://tailwindcss.com/docs/align-items
       */
      'align-items': [{
        items: ['start', 'end', 'center', 'baseline', 'stretch']
      }],

      /**
       * Align Self
       * @see https://tailwindcss.com/docs/align-self
       */
      'align-self': [{
        self: ['auto', 'start', 'end', 'center', 'stretch', 'baseline']
      }],

      /**
       * Place Content
       * @see https://tailwindcss.com/docs/place-content
       */
      'place-content': [{
        'place-content': [].concat(getAlign(), ['stretch'])
      }],

      /**
       * Place Items
       * @see https://tailwindcss.com/docs/place-items
       */
      'place-items': [{
        'place-items': ['start', 'end', 'center', 'stretch']
      }],

      /**
       * Place Self
       * @see https://tailwindcss.com/docs/place-self
       */
      'place-self': [{
        'place-self': ['auto', 'start', 'end', 'center', 'stretch']
      }],
      // Spacing

      /**
       * Padding
       * @see https://tailwindcss.com/docs/padding
       */
      p: [{
        p: [padding]
      }],

      /**
       * Padding X
       * @see https://tailwindcss.com/docs/padding
       */
      px: [{
        px: [padding]
      }],

      /**
       * Padding Y
       * @see https://tailwindcss.com/docs/padding
       */
      py: [{
        py: [padding]
      }],

      /**
       * Padding Top
       * @see https://tailwindcss.com/docs/padding
       */
      pt: [{
        pt: [padding]
      }],

      /**
       * Padding Right
       * @see https://tailwindcss.com/docs/padding
       */
      pr: [{
        pr: [padding]
      }],

      /**
       * Padding Bottom
       * @see https://tailwindcss.com/docs/padding
       */
      pb: [{
        pb: [padding]
      }],

      /**
       * Padding Left
       * @see https://tailwindcss.com/docs/padding
       */
      pl: [{
        pl: [padding]
      }],

      /**
       * Margin
       * @see https://tailwindcss.com/docs/margin
       */
      m: [{
        m: [margin]
      }],

      /**
       * Margin X
       * @see https://tailwindcss.com/docs/margin
       */
      mx: [{
        mx: [margin]
      }],

      /**
       * Margin Y
       * @see https://tailwindcss.com/docs/margin
       */
      my: [{
        my: [margin]
      }],

      /**
       * Margin Top
       * @see https://tailwindcss.com/docs/margin
       */
      mt: [{
        mt: [margin]
      }],

      /**
       * Margin Right
       * @see https://tailwindcss.com/docs/margin
       */
      mr: [{
        mr: [margin]
      }],

      /**
       * Margin Bottom
       * @see https://tailwindcss.com/docs/margin
       */
      mb: [{
        mb: [margin]
      }],

      /**
       * Margin Left
       * @see https://tailwindcss.com/docs/margin
       */
      ml: [{
        ml: [margin]
      }],

      /**
       * Space Between X
       * @see https://tailwindcss.com/docs/space
       */
      'space-x': [{
        'space-x': [space]
      }],

      /**
       * Space Between X Reverse
       * @see https://tailwindcss.com/docs/space
       */
      'space-x-reverse': ['space-x-reverse'],

      /**
       * Space Between Y
       * @see https://tailwindcss.com/docs/space
       */
      'space-y': [{
        'space-y': [space]
      }],

      /**
       * Space Between Y Reverse
       * @see https://tailwindcss.com/docs/space
       */
      'space-y-reverse': ['space-y-reverse'],
      // Sizing

      /**
       * Width
       * @see https://tailwindcss.com/docs/width
       */
      w: [{
        w: ['auto', 'min', 'max', spacing]
      }],

      /**
       * Min-Width
       * @see https://tailwindcss.com/docs/min-width
       */
      'min-w': [{
        'min-w': ['min', 'max', 'fit', isLength]
      }],

      /**
       * Max-Width
       * @see https://tailwindcss.com/docs/max-width
       */
      'max-w': [{
        'max-w': ['0', 'none', 'full', 'min', 'max', 'fit', 'prose', {
          screen: [isTshirtSize]
        }, isTshirtSize, isArbitraryLength]
      }],

      /**
       * Height
       * @see https://tailwindcss.com/docs/height
       */
      h: [{
        h: getSpacingWithAuto()
      }],

      /**
       * Min-Height
       * @see https://tailwindcss.com/docs/min-height
       */
      'min-h': [{
        'min-h': ['min', 'max', 'fit', isLength]
      }],

      /**
       * Max-Height
       * @see https://tailwindcss.com/docs/max-height
       */
      'max-h': [{
        'max-h': [spacing, 'min', 'max', 'fit']
      }],
      // Typography

      /**
       * Font Size
       * @see https://tailwindcss.com/docs/font-size
       */
      'font-size': [{
        text: ['base', isTshirtSize, isArbitraryLength]
      }],

      /**
       * Font Smoothing
       * @see https://tailwindcss.com/docs/font-smoothing
       */
      'font-smoothing': ['antialiased', 'subpixel-antialiased'],

      /**
       * Font Style
       * @see https://tailwindcss.com/docs/font-style
       */
      'font-style': ['italic', 'not-italic'],

      /**
       * Font Weight
       * @see https://tailwindcss.com/docs/font-weight
       */
      'font-weight': [{
        font: ['thin', 'extralight', 'light', 'normal', 'medium', 'semibold', 'bold', 'extrabold', 'black', isArbitraryWeight]
      }],

      /**
       * Font Family
       * @see https://tailwindcss.com/docs/font-family
       */
      'font-family': [{
        font: [isAny]
      }],

      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      'fvn-normal': ['normal-nums'],

      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      'fvn-ordinal': ['ordinal'],

      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      'fvn-slashed-zero': ['slashed-zero'],

      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      'fvn-figure': ['lining-nums', 'oldstyle-nums'],

      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      'fvn-spacing': ['proportional-nums', 'tabular-nums'],

      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      'fvn-fraction': ['diagonal-fractions', 'stacked-fractons'],

      /**
       * Letter Spacing
       * @see https://tailwindcss.com/docs/letter-spacing
       */
      tracking: [{
        tracking: ['tighter', 'tight', 'normal', 'wide', 'wider', 'widest', isArbitraryLength]
      }],

      /**
       * Line Height
       * @see https://tailwindcss.com/docs/line-height
       */
      leading: [{
        leading: ['none', 'tight', 'snug', 'normal', 'relaxed', 'loose', isLength]
      }],

      /**
       * List Style Type
       * @see https://tailwindcss.com/docs/list-style-type
       */
      'list-style-type': [{
        list: ['none', 'disc', 'decimal', isArbitraryValue]
      }],

      /**
       * List Style Position
       * @see https://tailwindcss.com/docs/list-style-position
       */
      'list-style-position': [{
        list: ['inside', 'outside']
      }],

      /**
       * Placeholder Color
       * @deprecated since Tailwind CSS v3.0.0
       * @see https://tailwindcss.com/docs/placeholder-color
       */
      'placeholder-color': [{
        placeholder: [colors]
      }],

      /**
       * Placeholder Opacity
       * @see https://tailwindcss.com/docs/placeholder-opacity
       */
      'placeholder-opacity': [{
        'placeholder-opacity': [opacity]
      }],

      /**
       * Text Alignment
       * @see https://tailwindcss.com/docs/text-align
       */
      'text-alignment': [{
        text: ['left', 'center', 'right', 'justify']
      }],

      /**
       * Text Color
       * @see https://tailwindcss.com/docs/text-color
       */
      'text-color': [{
        text: [colors]
      }],

      /**
       * Text Opacity
       * @see https://tailwindcss.com/docs/text-opacity
       */
      'text-opacity': [{
        'text-opacity': [opacity]
      }],

      /**
       * Text Decoration
       * @see https://tailwindcss.com/docs/text-decoration
       */
      'text-decoration': ['underline', 'overline', 'line-through', 'no-underline'],

      /**
       * Text Decoration Style
       * @see https://tailwindcss.com/docs/text-decoration-style
       */
      'text-decoration-style': [{
        decoration: [].concat(getLineStyles(), ['wavy'])
      }],

      /**
       * Text Decoration Thickness
       * @see https://tailwindcss.com/docs/text-decoration-thickness
       */
      'text-decoration-thickness': [{
        decoration: ['auto', 'from-font', isLength]
      }],

      /**
       * Text Underline Offset
       * @see https://tailwindcss.com/docs/text-underline-offset
       */
      'underline-offset': [{
        'underline-offset': ['auto', isLength]
      }],

      /**
       * Text Decoration Color
       * @see https://tailwindcss.com/docs/text-decoration-color
       */
      'text-decoration-color': [{
        decoration: [colors]
      }],

      /**
       * Text Transform
       * @see https://tailwindcss.com/docs/text-transform
       */
      'text-transform': ['uppercase', 'lowercase', 'capitalize', 'normal-case'],

      /**
       * Text Overflow
       * @see https://tailwindcss.com/docs/text-overflow
       */
      'text-overflow': ['truncate', 'text-ellipsis', 'text-clip'],

      /**
       * Text Indent
       * @see https://tailwindcss.com/docs/text-indent
       */
      indent: [{
        indent: [spacing]
      }],

      /**
       * Vertical Alignment
       * @see https://tailwindcss.com/docs/vertical-align
       */
      'vertical-align': [{
        align: ['baseline', 'top', 'middle', 'bottom', 'text-top', 'text-bottom', 'sub', 'super', isArbitraryLength]
      }],

      /**
       * Whitespace
       * @see https://tailwindcss.com/docs/whitespace
       */
      whitespace: [{
        whitespace: ['normal', 'nowrap', 'pre', 'pre-line', 'pre-wrap']
      }],

      /**
       * Word Break
       * @see https://tailwindcss.com/docs/word-break
       */
      "break": [{
        "break": ['normal', 'words', 'all']
      }],

      /**
       * Content
       * @see https://tailwindcss.com/docs/content
       */
      content: [{
        content: ['none', isArbitraryValue]
      }],
      // Backgrounds

      /**
       * Background Attachment
       * @see https://tailwindcss.com/docs/background-attachment
       */
      'bg-attachment': [{
        bg: ['fixed', 'local', 'scroll']
      }],

      /**
       * Background Clip
       * @see https://tailwindcss.com/docs/background-clip
       */
      'bg-clip': [{
        'bg-clip': ['border', 'padding', 'content', 'text']
      }],

      /**
       * Background Opacity
       * @deprecated since Tailwind CSS v3.0.0
       * @see https://tailwindcss.com/docs/background-opacity
       */
      'bg-opacity': [{
        'bg-opacity': [opacity]
      }],

      /**
       * Background Origin
       * @see https://tailwindcss.com/docs/background-origin
       */
      'bg-origin': [{
        'bg-origin': ['border', 'padding', 'content']
      }],

      /**
       * Background Position
       * @see https://tailwindcss.com/docs/background-position
       */
      'bg-position': [{
        bg: [].concat(getPositions(), [isArbitraryPosition])
      }],

      /**
       * Background Repeat
       * @see https://tailwindcss.com/docs/background-repeat
       */
      'bg-repeat': [{
        bg: ['no-repeat', {
          repeat: ['', 'x', 'y', 'round', 'space']
        }]
      }],

      /**
       * Background Size
       * @see https://tailwindcss.com/docs/background-size
       */
      'bg-size': [{
        bg: ['auto', 'cover', 'contain', isArbitrarySize]
      }],

      /**
       * Background Image
       * @see https://tailwindcss.com/docs/background-image
       */
      'bg-image': [{
        bg: ['none', {
          'gradient-to': ['t', 'tr', 'r', 'br', 'b', 'bl', 'l', 'tl']
        }, isArbitraryUrl]
      }],

      /**
       * Background Color
       * @see https://tailwindcss.com/docs/background-color
       */
      'bg-color': [{
        bg: [colors]
      }],

      /**
       * Gradient Color Stops From
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      'gradient-from': [{
        from: [gradientColorStops]
      }],

      /**
       * Gradient Color Stops Via
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      'gradient-via': [{
        via: [gradientColorStops]
      }],

      /**
       * Gradient Color Stops To
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      'gradient-to': [{
        to: [gradientColorStops]
      }],
      // Borders

      /**
       * Border Radius
       * @see https://tailwindcss.com/docs/border-radius
       */
      rounded: [{
        rounded: [borderRadius]
      }],

      /**
       * Border Radius Top
       * @see https://tailwindcss.com/docs/border-radius
       */
      'rounded-t': [{
        'rounded-t': [borderRadius]
      }],

      /**
       * Border Radius Right
       * @see https://tailwindcss.com/docs/border-radius
       */
      'rounded-r': [{
        'rounded-r': [borderRadius]
      }],

      /**
       * Border Radius Bottom
       * @see https://tailwindcss.com/docs/border-radius
       */
      'rounded-b': [{
        'rounded-b': [borderRadius]
      }],

      /**
       * Border Radius Left
       * @see https://tailwindcss.com/docs/border-radius
       */
      'rounded-l': [{
        'rounded-l': [borderRadius]
      }],

      /**
       * Border Radius Top Left
       * @see https://tailwindcss.com/docs/border-radius
       */
      'rounded-tl': [{
        'rounded-tl': [borderRadius]
      }],

      /**
       * Border Radius Top Right
       * @see https://tailwindcss.com/docs/border-radius
       */
      'rounded-tr': [{
        'rounded-tr': [borderRadius]
      }],

      /**
       * Border Radius Bottom Right
       * @see https://tailwindcss.com/docs/border-radius
       */
      'rounded-br': [{
        'rounded-br': [borderRadius]
      }],

      /**
       * Border Radius Bottom Left
       * @see https://tailwindcss.com/docs/border-radius
       */
      'rounded-bl': [{
        'rounded-bl': [borderRadius]
      }],

      /**
       * Border Width
       * @see https://tailwindcss.com/docs/border-width
       */
      'border-w': [{
        border: [borderWidth]
      }],

      /**
       * Border Width X
       * @see https://tailwindcss.com/docs/border-width
       */
      'border-w-x': [{
        'border-x': [borderWidth]
      }],

      /**
       * Border Width Y
       * @see https://tailwindcss.com/docs/border-width
       */
      'border-w-y': [{
        'border-y': [borderWidth]
      }],

      /**
       * Border Width Top
       * @see https://tailwindcss.com/docs/border-width
       */
      'border-w-t': [{
        'border-t': [borderWidth]
      }],

      /**
       * Border Width Right
       * @see https://tailwindcss.com/docs/border-width
       */
      'border-w-r': [{
        'border-r': [borderWidth]
      }],

      /**
       * Border Width Bottom
       * @see https://tailwindcss.com/docs/border-width
       */
      'border-w-b': [{
        'border-b': [borderWidth]
      }],

      /**
       * Border Width Left
       * @see https://tailwindcss.com/docs/border-width
       */
      'border-w-l': [{
        'border-l': [borderWidth]
      }],

      /**
       * Border Opacity
       * @see https://tailwindcss.com/docs/border-opacity
       */
      'border-opacity': [{
        'border-opacity': [opacity]
      }],

      /**
       * Border Style
       * @see https://tailwindcss.com/docs/border-style
       */
      'border-style': [{
        border: [].concat(getLineStyles(), ['hidden'])
      }],

      /**
       * Divide Width X
       * @see https://tailwindcss.com/docs/divide-width
       */
      'divide-x': [{
        'divide-x': [borderWidth]
      }],

      /**
       * Divide Width X Reverse
       * @see https://tailwindcss.com/docs/divide-width
       */
      'divide-x-reverse': ['divide-x-reverse'],

      /**
       * Divide Width Y
       * @see https://tailwindcss.com/docs/divide-width
       */
      'divide-y': [{
        'divide-y': [borderWidth]
      }],

      /**
       * Divide Width Y Reverse
       * @see https://tailwindcss.com/docs/divide-width
       */
      'divide-y-reverse': ['divide-y-reverse'],

      /**
       * Divide Opacity
       * @see https://tailwindcss.com/docs/divide-opacity
       */
      'divide-opacity': [{
        'divide-opacity': [opacity]
      }],

      /**
       * Divide Style
       * @see https://tailwindcss.com/docs/divide-style
       */
      'divide-style': [{
        divide: getLineStyles()
      }],

      /**
       * Border Color
       * @see https://tailwindcss.com/docs/border-color
       */
      'border-color': [{
        border: [borderColor]
      }],

      /**
       * Border Color X
       * @see https://tailwindcss.com/docs/border-color
       */
      'border-color-x': [{
        'border-x': [borderColor]
      }],

      /**
       * Border Color Y
       * @see https://tailwindcss.com/docs/border-color
       */
      'border-color-y': [{
        'border-y': [borderColor]
      }],

      /**
       * Border Color Top
       * @see https://tailwindcss.com/docs/border-color
       */
      'border-color-t': [{
        'border-t': [borderColor]
      }],

      /**
       * Border Color Right
       * @see https://tailwindcss.com/docs/border-color
       */
      'border-color-r': [{
        'border-r': [borderColor]
      }],

      /**
       * Border Color Bottom
       * @see https://tailwindcss.com/docs/border-color
       */
      'border-color-b': [{
        'border-b': [borderColor]
      }],

      /**
       * Border Color Left
       * @see https://tailwindcss.com/docs/border-color
       */
      'border-color-l': [{
        'border-l': [borderColor]
      }],

      /**
       * Divide Color
       * @see https://tailwindcss.com/docs/divide-color
       */
      'divide-color': [{
        divide: [borderColor]
      }],

      /**
       * Outline Style
       * @see https://tailwindcss.com/docs/outline-style
       */
      'outline-style': [{
        outline: [''].concat(getLineStyles(), ['hidden'])
      }],

      /**
       * Outline Offset
       * @see https://tailwindcss.com/docs/outline-offset
       */
      'outline-offset': [{
        'outline-offset': [isLength]
      }],

      /**
       * Outline Width
       * @see https://tailwindcss.com/docs/outline-width
       */
      'outline-w': [{
        outline: [isLength]
      }],

      /**
       * Outline Color
       * @see https://tailwindcss.com/docs/outline-color
       */
      'outline-color': [{
        outline: [colors]
      }],

      /**
       * Ring Width
       * @see https://tailwindcss.com/docs/ring-width
       */
      'ring-w': [{
        ring: getLengthWithEmpty()
      }],

      /**
       * Ring Width Inset
       * @see https://tailwindcss.com/docs/ring-width
       */
      'ring-w-inset': ['ring-inset'],

      /**
       * Ring Color
       * @see https://tailwindcss.com/docs/ring-color
       */
      'ring-color': [{
        ring: [colors]
      }],

      /**
       * Ring Opacity
       * @see https://tailwindcss.com/docs/ring-opacity
       */
      'ring-opacity': [{
        'ring-opacity': [opacity]
      }],

      /**
       * Ring Offset Width
       * @see https://tailwindcss.com/docs/ring-offset-width
       */
      'ring-offset-w': [{
        'ring-offset': [isLength]
      }],

      /**
       * Ring Offset Color
       * @see https://tailwindcss.com/docs/ring-offset-color
       */
      'ring-offset-color': [{
        'ring-offset': [colors]
      }],
      // Effects

      /**
       * Box Shadow
       * @see https://tailwindcss.com/docs/box-shadow
       */
      shadow: [{
        shadow: ['', 'inner', 'none', isTshirtSize, isArbitraryShadow]
      }],

      /**
       * Box Shadow Color
       * @see https://tailwindcss.com/docs/box-shadow-color
       */
      'shadow-color': [{
        shadow: [isAny]
      }],

      /**
       * Opacity
       * @see https://tailwindcss.com/docs/opacity
       */
      opacity: [{
        opacity: [opacity]
      }],

      /**
       * Mix Beldn Mode
       * @see https://tailwindcss.com/docs/mix-blend-mode
       */
      'mix-blend': [{
        'mix-blend': getBlendModes()
      }],

      /**
       * Background Blend Mode
       * @see https://tailwindcss.com/docs/background-blend-mode
       */
      'bg-blend': [{
        'bg-blend': getBlendModes()
      }],
      // Filters

      /**
       * Filter
       * @deprecated since Tailwind CSS v3.0.0
       * @see https://tailwindcss.com/docs/filter
       */
      filter: [{
        filter: ['', 'none']
      }],

      /**
       * Blur
       * @see https://tailwindcss.com/docs/blur
       */
      blur: [{
        blur: [blur]
      }],

      /**
       * Brightness
       * @see https://tailwindcss.com/docs/brightness
       */
      brightness: [{
        brightness: [brightness]
      }],

      /**
       * Contrast
       * @see https://tailwindcss.com/docs/contrast
       */
      contrast: [{
        contrast: [contrast]
      }],

      /**
       * Drop Shadow
       * @see https://tailwindcss.com/docs/drop-shadow
       */
      'drop-shadow': [{
        'drop-shadow': ['', 'none', isTshirtSize, isArbitraryValue]
      }],

      /**
       * Grayscale
       * @see https://tailwindcss.com/docs/grayscale
       */
      grayscale: [{
        grayscale: [grayscale]
      }],

      /**
       * Hue Rotate
       * @see https://tailwindcss.com/docs/hue-rotate
       */
      'hue-rotate': [{
        'hue-rotate': [hueRotate]
      }],

      /**
       * Invert
       * @see https://tailwindcss.com/docs/invert
       */
      invert: [{
        invert: [invert]
      }],

      /**
       * Saturate
       * @see https://tailwindcss.com/docs/saturate
       */
      saturate: [{
        saturate: [saturate]
      }],

      /**
       * Sepia
       * @see https://tailwindcss.com/docs/sepia
       */
      sepia: [{
        sepia: [sepia]
      }],

      /**
       * Backdrop Filter
       * @deprecated since Tailwind CSS v3.0.0
       * @see https://tailwindcss.com/docs/backdrop-filter
       */
      'backdrop-filter': [{
        'backdrop-filter': ['', 'none']
      }],

      /**
       * Backdrop Blur
       * @see https://tailwindcss.com/docs/backdrop-blur
       */
      'backdrop-blur': [{
        'backdrop-blur': [blur]
      }],

      /**
       * Backdrop Brightness
       * @see https://tailwindcss.com/docs/backdrop-brightness
       */
      'backdrop-brightness': [{
        'backdrop-brightness': [brightness]
      }],

      /**
       * Backdrop Contrast
       * @see https://tailwindcss.com/docs/backdrop-contrast
       */
      'backdrop-contrast': [{
        'backdrop-contrast': [contrast]
      }],

      /**
       * Backdrop Grayscale
       * @see https://tailwindcss.com/docs/backdrop-grayscale
       */
      'backdrop-grayscale': [{
        'backdrop-grayscale': [grayscale]
      }],

      /**
       * Backdrop Hue Rotate
       * @see https://tailwindcss.com/docs/backdrop-hue-rotate
       */
      'backdrop-hue-rotate': [{
        'backdrop-hue-rotate': [hueRotate]
      }],

      /**
       * Backdrop Invert
       * @see https://tailwindcss.com/docs/backdrop-invert
       */
      'backdrop-invert': [{
        'backdrop-invert': [invert]
      }],

      /**
       * Backdrop Opacity
       * @see https://tailwindcss.com/docs/backdrop-opacity
       */
      'backdrop-opacity': [{
        'backdrop-opacity': [opacity]
      }],

      /**
       * Backdrop Saturate
       * @see https://tailwindcss.com/docs/backdrop-saturate
       */
      'backdrop-saturate': [{
        'backdrop-saturate': [saturate]
      }],

      /**
       * Backdrop Sepia
       * @see https://tailwindcss.com/docs/backdrop-sepia
       */
      'backdrop-sepia': [{
        'backdrop-sepia': [sepia]
      }],
      // Tables

      /**
       * Border Collapse
       * @see https://tailwindcss.com/docs/border-collapse
       */
      'border-collapse': [{
        border: ['collapse', 'separate']
      }],

      /**
       * Table Layout
       * @see https://tailwindcss.com/docs/table-layout
       */
      'table-layout': [{
        table: ['auto', 'fixed']
      }],
      // Transitions and Animation

      /**
       * Tranisition Property
       * @see https://tailwindcss.com/docs/transition-property
       */
      transition: [{
        transition: ['none', 'all', '', 'colors', 'opacity', 'shadow', 'transform', isArbitraryValue]
      }],

      /**
       * Transition Duration
       * @see https://tailwindcss.com/docs/transition-duration
       */
      duration: [{
        duration: [isInteger]
      }],

      /**
       * Transition Timing Function
       * @see https://tailwindcss.com/docs/transition-timing-function
       */
      ease: [{
        ease: ['linear', 'in', 'out', 'in-out', isArbitraryValue]
      }],

      /**
       * Transition Delay
       * @see https://tailwindcss.com/docs/transition-delay
       */
      delay: [{
        delay: [isInteger]
      }],

      /**
       * Animation
       * @see https://tailwindcss.com/docs/animation
       */
      animate: [{
        animate: ['none', 'spin', 'ping', 'pulse', 'bounce', isArbitraryValue]
      }],
      // Transforms

      /**
       * Transform
       * @see https://tailwindcss.com/docs/transform
       */
      transform: [{
        transform: ['', 'gpu', 'none']
      }],

      /**
       * Scale
       * @see https://tailwindcss.com/docs/scale
       */
      scale: [{
        scale: [scale]
      }],

      /**
       * Scale X
       * @see https://tailwindcss.com/docs/scale
       */
      'scale-x': [{
        'scale-x': [scale]
      }],

      /**
       * Scale Y
       * @see https://tailwindcss.com/docs/scale
       */
      'scale-y': [{
        'scale-y': [scale]
      }],

      /**
       * Rotate
       * @see https://tailwindcss.com/docs/rotate
       */
      rotate: [{
        rotate: [isInteger, isArbitraryValue]
      }],

      /**
       * Translate X
       * @see https://tailwindcss.com/docs/translate
       */
      'translate-x': [{
        'translate-x': [translate]
      }],

      /**
       * Translate Y
       * @see https://tailwindcss.com/docs/translate
       */
      'translate-y': [{
        'translate-y': [translate]
      }],

      /**
       * Skew X
       * @see https://tailwindcss.com/docs/skew
       */
      'skew-x': [{
        'skew-x': [skew]
      }],

      /**
       * Skew Y
       * @see https://tailwindcss.com/docs/skew
       */
      'skew-y': [{
        'skew-y': [skew]
      }],

      /**
       * Transform Origin
       * @see https://tailwindcss.com/docs/transform-origin
       */
      'transform-origin': [{
        origin: ['center', 'top', 'top-right', 'right', 'bottom-right', 'bottom', 'bottom-left', 'left', 'top-left', isArbitraryValue]
      }],
      // Interactivity

      /**
       * Accent Color
       * @see https://tailwindcss.com/docs/accent-color
       */
      accent: [{
        accent: ['auto', colors]
      }],

      /**
       * Appearance
       * @see https://tailwindcss.com/docs/appearance
       */
      appearance: ['appearance-none'],

      /**
       * Cursor
       * @see https://tailwindcss.com/docs/cursor
       */
      cursor: [{
        cursor: ['auto', 'default', 'pointer', 'wait', 'text', 'move', 'help', 'not-allowed', 'none', 'context-menu', 'progress', 'cell', 'crosshair', 'vertical-text', 'alias', 'copy', 'no-drop', 'grab', 'grabbing', 'all-scroll', 'col-resize', 'row-resize', 'n-resize', 'e-resize', 's-resize', 'w-resize', 'ne-resize', 'nw-resize', 'se-resize', 'sw-resize', 'ew-resize', 'ns-resize', 'nesw-resize', 'nwse-resize', 'zoom-in', 'zoom-out', isArbitraryValue]
      }],

      /**
       * Caret Color
       * @see https://tailwindcss.com/docs/just-in-time-mode#caret-color-utilities
       */
      'caret-color': [{
        caret: [colors]
      }],

      /**
       * Pointer Events
       * @see https://tailwindcss.com/docs/pointer-events
       */
      'pointer-events': [{
        'pointer-events': ['none', 'auto']
      }],

      /**
       * Resize
       * @see https://tailwindcss.com/docs/resize
       */
      resize: [{
        resize: ['none', 'y', 'x', '']
      }],

      /**
       * Scroll Behavior
       * @see https://tailwindcss.com/docs/scroll-behavior
       */
      'scroll-behavior': [{
        scroll: ['auto', 'smooth']
      }],

      /**
       * Scroll Margin
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      'scroll-m': [{
        'scroll-m': [spacing]
      }],

      /**
       * Scroll Margin X
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      'scroll-mx': [{
        'scroll-mx': [spacing]
      }],

      /**
       * Scroll Margin Y
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      'scroll-my': [{
        'scroll-my': [spacing]
      }],

      /**
       * Scroll Margin Top
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      'scroll-mt': [{
        'scroll-mt': [spacing]
      }],

      /**
       * Scroll Margin Right
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      'scroll-mr': [{
        'scroll-mr': [spacing]
      }],

      /**
       * Scroll Margin Bottom
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      'scroll-mb': [{
        'scroll-mb': [spacing]
      }],

      /**
       * Scroll Margin Left
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      'scroll-ml': [{
        'scroll-ml': [spacing]
      }],

      /**
       * Scroll Padding
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      'scroll-p': [{
        'scroll-p': [spacing]
      }],

      /**
       * Scroll Padding X
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      'scroll-px': [{
        'scroll-px': [spacing]
      }],

      /**
       * Scroll Padding Y
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      'scroll-py': [{
        'scroll-py': [spacing]
      }],

      /**
       * Scroll Padding Top
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      'scroll-pt': [{
        'scroll-pt': [spacing]
      }],

      /**
       * Scroll Padding Right
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      'scroll-pr': [{
        'scroll-pr': [spacing]
      }],

      /**
       * Scroll Padding Bottom
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      'scroll-pb': [{
        'scroll-pb': [spacing]
      }],

      /**
       * Scroll Padding Left
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      'scroll-pl': [{
        'scroll-pl': [spacing]
      }],

      /**
       * Scroll Snap Align
       * @see https://tailwindcss.com/docs/scroll-snap-align
       */
      'snap-align': [{
        snap: ['start', 'end', 'center', 'align-none']
      }],

      /**
       * Scroll Snap Stop
       * @see https://tailwindcss.com/docs/scroll-snap-stop
       */
      'snap-stop': [{
        snap: ['normal', 'always']
      }],

      /**
       * Scroll Snap Type
       * @see https://tailwindcss.com/docs/scroll-snap-type
       */
      'snap-type': [{
        snap: ['none', 'x', 'y', 'both']
      }],

      /**
       * Scroll Snap Type Strictness
       * @see https://tailwindcss.com/docs/scroll-snap-type
       */
      'snap-strictness': [{
        snap: ['mandatory', 'proximity']
      }],

      /**
       * Touch Action
       * @see https://tailwindcss.com/docs/touch-action
       */
      touch: [{
        touch: ['auto', 'none', 'pinch-zoom', 'manipulation', {
          pan: ['x', 'left', 'right', 'y', 'up', 'down']
        }]
      }],

      /**
       * User Select
       * @see https://tailwindcss.com/docs/user-select
       */
      select: [{
        select: ['none', 'text', 'all', 'auto']
      }],

      /**
       * Will Change
       * @see https://tailwindcss.com/docs/will-change
       */
      'will-change': [{
        'will-change': ['auto', 'scroll', 'contents', 'transform', isArbitraryValue]
      }],
      // SVG

      /**
       * Fill
       * @see https://tailwindcss.com/docs/fill
       */
      fill: [{
        fill: [colors]
      }],

      /**
       * Stroke Width
       * @see https://tailwindcss.com/docs/stroke-width
       */
      'stroke-w': [{
        stroke: [isLength]
      }],

      /**
       * Stroke
       * @see https://tailwindcss.com/docs/stroke
       */
      stroke: [{
        stroke: [colors]
      }],
      // Accessibility

      /**
       * Screen Readers
       * @see https://tailwindcss.com/docs/screen-readers
       */
      sr: ['sr-only', 'not-sr-only']
    },
    conflictingClassGroups: {
      overflow: ['overflow-x', 'overflow-y'],
      overscroll: ['overscroll-x', 'overscroll-y'],
      inset: ['inset-x', 'inset-y', 'top', 'right', 'bottom', 'left'],
      'inset-x': ['right', 'left'],
      'inset-y': ['top', 'bottom'],
      flex: ['basis', 'grow', 'shrink'],
      'col-start-end': ['col-start', 'col-end'],
      'row-start-end': ['row-start', 'row-end'],
      gap: ['gap-x', 'gap-y'],
      p: ['px', 'py', 'pt', 'pr', 'pb', 'pl'],
      px: ['pr', 'pl'],
      py: ['pt', 'pb'],
      m: ['mx', 'my', 'mt', 'mr', 'mb', 'ml'],
      mx: ['mr', 'ml'],
      my: ['mt', 'mb'],
      'font-size': ['leading'],
      'fvn-normal': ['fvn-ordinal', 'fvn-slashed-zero', 'fvn-figure', 'fvn-spacing', 'fvn-fraction'],
      'fvn-ordinal': ['fvn-normal'],
      'fvn-slashed-zero': ['fvn-normal'],
      'fvn-figure': ['fvn-normal'],
      'fvn-spacing': ['fvn-normal'],
      'fvn-fraction': ['fvn-normal'],
      rounded: ['rounded-t', 'rounded-r', 'rounded-b', 'rounded-l', 'rounded-tl', 'rounded-tr', 'rounded-br', 'rounded-bl'],
      'rounded-t': ['rounded-tl', 'rounded-tr'],
      'rounded-r': ['rounded-tr', 'rounded-br'],
      'rounded-b': ['rounded-br', 'rounded-bl'],
      'rounded-l': ['rounded-tl', 'rounded-bl'],
      'border-w': ['border-w-t', 'border-w-r', 'border-w-b', 'border-w-l'],
      'border-w-x': ['border-w-r', 'border-w-l'],
      'border-w-y': ['border-w-t', 'border-w-b'],
      'border-color': ['border-color-t', 'border-color-r', 'border-color-b', 'border-color-l'],
      'border-color-x': ['border-color-r', 'border-color-l'],
      'border-color-y': ['border-color-t', 'border-color-b'],
      'scroll-m': ['scroll-mx', 'scroll-my', 'scroll-mt', 'scroll-mr', 'scroll-mb', 'scroll-ml'],
      'scroll-mx': ['scroll-mr', 'scroll-ml'],
      'scroll-my': ['scroll-mt', 'scroll-mb'],
      'scroll-p': ['scroll-px', 'scroll-py', 'scroll-pt', 'scroll-pr', 'scroll-pb', 'scroll-pl'],
      'scroll-px': ['scroll-pr', 'scroll-pl'],
      'scroll-py': ['scroll-pt', 'scroll-pb']
    }
  };
}

var twMerge = /*#__PURE__*/createTailwindMerge(getDefaultConfig);

var _excluded$1l = ["children", "href", "shape", "size", "variant", "color", "startIcon", "endIcon", "fullWidth", "responsive", "animation", "loading", "active", "disabled", "dataTheme", "className", "style"];
var Button = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var _clsx;

  var children = _ref.children,
      href = _ref.href,
      shape = _ref.shape,
      size = _ref.size,
      variant = _ref.variant,
      color = _ref.color,
      startIcon = _ref.startIcon,
      endIcon = _ref.endIcon,
      fullWidth = _ref.fullWidth,
      responsive = _ref.responsive,
      _ref$animation = _ref.animation,
      animation = _ref$animation === void 0 ? true : _ref$animation,
      loading = _ref.loading,
      active = _ref.active,
      disabled = _ref.disabled,
      dataTheme = _ref.dataTheme,
      className = _ref.className,
      style = _ref.style,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$1l);

  var classes = twMerge('btn', className, clsx((startIcon && !loading || endIcon) && 'gap-2', (_clsx = {}, _clsx["btn-" + size] = size, _clsx["btn-" + shape] = shape, _clsx["btn-" + variant] = variant, _clsx["btn-" + color] = color, _clsx['btn-block'] = fullWidth, _clsx['btn-xs md:btn-sm lg:btn-md xl:btn-lg'] = responsive, _clsx['no-animation'] = !animation, _clsx['btn-active'] = active, _clsx['btn-disabled'] = disabled, _clsx.loading = loading, _clsx)));

  if (href) {
    return jsxs("a", {
      className: classes,
      style: style,
      href: href,
      children: [startIcon && startIcon, children, endIcon && endIcon]
    });
  } else {
    return jsxs("button", _extends$1({}, props, {
      ref: ref,
      "data-theme": dataTheme,
      className: classes,
      style: style,
      disabled: disabled,
      children: [startIcon && !loading && startIcon, children, endIcon && endIcon]
    }));
  }
});
Button.displayName = 'Button';

var _excluded$1k = ["dataTheme", "className"];

var DropdownMenu = function DropdownMenu(_ref) {
  var dataTheme = _ref.dataTheme,
      className = _ref.className,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$1k);

  var classes = twMerge('dropdown-content menu p-2 shadow bg-base-100 rounded-box', className);
  return jsx("ul", _extends$1({}, props, {
    tabIndex: 0,
    "data-theme": dataTheme,
    className: classes
  }));
};

var _excluded$1j = ["className"];
var DropdownItem = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var className = _ref.className,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$1j);

  return jsx("li", {
    className: className,
    children: jsx("a", _extends$1({
      ref: ref
    }, props))
  });
});

var _excluded$1i = ["children", "color", "size", "button", "dataTheme", "className", "disabled"];

var DropdownToggle = function DropdownToggle(_ref) {
  var children = _ref.children,
      color = _ref.color,
      size = _ref.size,
      _ref$button = _ref.button,
      button = _ref$button === void 0 ? true : _ref$button,
      dataTheme = _ref.dataTheme,
      className = _ref.className,
      disabled = _ref.disabled,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$1i);

  return jsx("label", _extends$1({
    tabIndex: 0,
    className: className
  }, props, {
    children: button ? jsx(Button, {
      type: 'button',
      dataTheme: dataTheme,
      color: color,
      size: size,
      disabled: disabled,
      children: children
    }) : children
  }));
};

var _excluded$1h = ["children", "className", "item", "horizontal", "vertical", "hover", "open", "dataTheme"];
var Dropdown = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var _clsx;

  var children = _ref.children,
      className = _ref.className,
      item = _ref.item,
      horizontal = _ref.horizontal,
      vertical = _ref.vertical,
      hover = _ref.hover,
      open = _ref.open,
      dataTheme = _ref.dataTheme,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$1h);

  var classes = twMerge('dropdown', className, clsx((_clsx = {}, _clsx["dropdown-" + horizontal] = horizontal, _clsx["dropdown-" + vertical] = vertical, _clsx['dropdown-hover'] = hover, _clsx['dropdown-open'] = open, _clsx)));
  return jsxs("div", _extends$1({
    role: "listbox"
  }, props, {
    ref: ref,
    "data-theme": dataTheme,
    className: classes,
    children: [jsx("label", {
      tabIndex: 0,
      children: children
    }), jsx("ul", {
      className: "dropdown-content",
      children: item
    })]
  }));
});
var Dropdown$1 = Object.assign(Dropdown, {
  Toggle: DropdownToggle,
  Menu: DropdownMenu,
  Item: DropdownItem
});

var _excluded$1g = ["children", "className"];
var ModalActions = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var children = _ref.children,
      className = _ref.className,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$1g);

  var classes = twMerge('modal-action', className);
  return jsx("div", _extends$1({}, props, {
    className: classes,
    ref: ref,
    children: children
  }));
});
ModalActions.displayName = 'ModalActions';

var _excluded$1f = ["children", "className"];
var ModalBody = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var children = _ref.children,
      className = _ref.className,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$1f);

  return jsx("div", _extends$1({}, props, {
    className: className,
    ref: ref,
    children: children
  }));
});
ModalBody.displayName = 'ModalBody';

var _excluded$1e = ["children", "className"];
var ModalHeader = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var children = _ref.children,
      className = _ref.className,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$1e);

  var classes = twMerge('w-full mb-8 text-xl', className);
  return jsx("div", _extends$1({}, props, {
    className: classes,
    ref: ref,
    children: children
  }));
});
ModalHeader.displayName = 'ModalHeader';

var _excluded$1d = ["children", "open", "responsive", "onClickBackdrop", "dataTheme", "className"];
var Modal = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var children = _ref.children,
      open = _ref.open,
      responsive = _ref.responsive,
      onClickBackdrop = _ref.onClickBackdrop,
      dataTheme = _ref.dataTheme,
      className = _ref.className,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$1d);

  var containerClasses = twMerge('modal', clsx({
    'modal-open': open,
    'modal-bottom sm:modal-middle': responsive
  }));
  var bodyClasses = twMerge('modal-box', className);
  return jsx("div", {
    "aria-label": "Modal",
    "aria-hidden": !open,
    "aria-modal": open,
    "data-theme": dataTheme,
    className: containerClasses,
    onClick: function onClick(e) {
      e.stopPropagation();

      if (e.target === e.currentTarget) {
        e.stopPropagation();

        if (onClickBackdrop) {
          onClickBackdrop();
        }
      }
    },
    children: jsx("div", _extends$1({}, props, {
      "data-theme": dataTheme,
      className: bodyClasses,
      ref: ref,
      children: children
    }))
  });
});
Modal.displayName = 'Modal';
var Modal$1 = Object.assign(Modal, {
  Header: ModalHeader,
  Body: ModalBody,
  Actions: ModalActions
});

var isReactFragment = function isReactFragment(node) {
  if (!node) return false;

  if (node != null && node.type) {
    return (node == null ? void 0 : node.type) === React.Fragment;
  }

  return node === React.Fragment;
}; // Return true if a react element is valid and not a fragment
// If a valid element is passed, add the props

var wrapWithElementIfInvalid = function wrapWithElementIfInvalid(_ref) {
  var node = _ref.node,
      wrapper = _ref.wrapper,
      _ref$props = _ref.props,
      props = _ref$props === void 0 ? {} : _ref$props;

  if (!node) {
    return /*#__PURE__*/React.cloneElement(wrapper, props);
  } else if (! /*#__PURE__*/React.isValidElement(node)) {
    return /*#__PURE__*/React.cloneElement(wrapper, props, node);
  } else if (isReactFragment(node)) {
    var _node$props;

    return /*#__PURE__*/React.cloneElement(wrapper, _extends$1({}, props, {
      className: twMerge((_node$props = node.props) == null ? void 0 : _node$props.className, props == null ? void 0 : props.className)
    }), node.props.children);
  } else {
    var _node$props2;

    return /*#__PURE__*/React.cloneElement(node, _extends$1({}, props, {
      className: twMerge((_node$props2 = node.props) == null ? void 0 : _node$props2.className, props == null ? void 0 : props.className)
    }));
  }
}; // Returns true if there is a single, string child element

var isSingleStringChild = function isSingleStringChild(children) {
  return children && React.Children.count(children) === 1 && /*#__PURE__*/React.isValidElement(children) && typeof children.props.children === 'string';
};

var _excluded$1c = ["onElement", "offElement", "active", "rotate", "flip", "dataTheme", "className"];
var Swap = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var onElement = _ref.onElement,
      offElement = _ref.offElement,
      active = _ref.active,
      rotate = _ref.rotate,
      flip = _ref.flip,
      dataTheme = _ref.dataTheme,
      className = _ref.className,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$1c);

  var classes = twMerge('swap', className, clsx({
    'swap-active': active,
    'swap-rotate': rotate,
    'swap-flip': flip
  })); // These next two pieces allow classname to be added to valid elements, or wrap invalid elements with a div and the classname

  var onEl = wrapWithElementIfInvalid({
    node: onElement,
    wrapper: jsx("div", {}),
    props: {
      className: 'swap-on'
    }
  });
  var offEl = wrapWithElementIfInvalid({
    node: offElement,
    wrapper: jsx("div", {}),
    props: {
      className: 'swap-off'
    }
  });
  return jsxs("label", _extends$1({}, props, {
    "data-theme": dataTheme,
    className: classes,
    ref: ref,
    children: [jsx("input", {
      type: "checkbox"
    }), onEl, offEl]
  }));
});

var _excluded$1b = ["children", "icon", "status", "dataTheme", "className", "innerClassName"];
var Alert = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var _clsx;

  var children = _ref.children,
      icon = _ref.icon,
      status = _ref.status,
      dataTheme = _ref.dataTheme,
      className = _ref.className,
      innerClassName = _ref.innerClassName,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$1b);

  var classes = twMerge('alert', className, clsx((_clsx = {}, _clsx["alert-" + status] = status, _clsx)));
  return jsx("div", _extends$1({
    role: "alert"
  }, props, {
    ref: ref,
    "data-theme": dataTheme,
    className: classes,
    children: jsxs("div", {
      className: twMerge('flex-1', innerClassName),
      children: [icon, children]
    })
  }));
});
Alert.displayName = 'Alert';

var _excluded$1a = ["children", "space", "className"];
var AvatarGroup = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var children = _ref.children,
      _ref$space = _ref.space,
      space = _ref$space === void 0 ? -6 : _ref$space,
      className = _ref.className,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$1a);

  var spacingClassName = (space < 0 ? '-' : '') + "space-x-" + Math.abs(space);
  var classes = clsx('avatar-group', spacingClassName, className);
  return jsx("div", _extends$1({
    "aria-label": "Group of " + children.length + " avatar photos"
  }, props, {
    className: classes,
    ref: ref,
    children: children
  }));
});

var _excluded$19 = ["size", "src", "letters", "shape", "color", "border", "borderColor", "online", "offline", "dataTheme", "className", "children"];
var Avatar = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var _clsx, _clsx2;

  var _ref$size = _ref.size,
      size = _ref$size === void 0 ? 'md' : _ref$size,
      src = _ref.src,
      letters = _ref.letters,
      shape = _ref.shape,
      color = _ref.color,
      border = _ref.border,
      borderColor = _ref.borderColor,
      online = _ref.online,
      offline = _ref.offline,
      dataTheme = _ref.dataTheme,
      className = _ref.className,
      children = _ref.children,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$19);

  var containerClasses = twMerge('avatar', className, clsx({
    online: online,
    offline: offline,
    placeholder: !src
  }));
  var imgClasses = clsx((_clsx = {
    'ring ring-offset-base-100 ring-offset-2': border
  }, _clsx["ring-" + borderColor] = borderColor, _clsx['rounded-btn'] = shape === 'square', _clsx['rounded-full'] = shape === 'circle', _clsx['w-32 h-32'] = size === 'lg', _clsx['w-24 h-24'] = size === 'md', _clsx['w-14 h-14'] = size === 'sm', _clsx['w-10 h-10'] = size === 'xs', _clsx));
  var placeholderClasses = clsx((_clsx2 = {
    'bg-neutral-focus': !color,
    'text-neutral-content': !color
  }, _clsx2["bg-" + color] = color, _clsx2["text-" + color + "-content"] = color, _clsx2['ring ring-offset-base-100 ring-offset-2'] = border, _clsx2["ring-" + borderColor] = borderColor, _clsx2['rounded-btn'] = shape === 'square', _clsx2['rounded-full'] = shape === 'circle', _clsx2['w-32 h-32 text-3xl'] = size === 'lg', _clsx2['w-24 h-24 text-xl'] = size === 'md', _clsx2['w-14 h-14'] = size === 'sm', _clsx2['w-10 h-10'] = size === 'xs', _clsx2));
  var customImgDimension = typeof size === 'number' ? {
    width: size,
    height: size
  } : {};

  var renderAvatarContents = function renderAvatarContents() {
    // Base case, if src is provided, render img
    if (src) {
      return jsx("div", {
        className: imgClasses,
        style: customImgDimension,
        children: jsx("img", {
          src: src
        })
      });
    } // Render a text avatar if letters are provided, or a single child that is a string
    else if (letters || isSingleStringChild(children)) {
      return jsx("div", {
        className: placeholderClasses,
        style: customImgDimension,
        children: jsx("span", {
          children: letters ? letters : children
        })
      });
    } // Render if a single, not string child was provided (allows for SVGs) and merges classes and styles
    else if (React.Children.count(children) === 1) {
      var firstChild = React.Children.only(children);
      return /*#__PURE__*/React.cloneElement(firstChild, {
        className: twMerge(imgClasses, firstChild.props.className),
        style: _extends$1({}, customImgDimension, firstChild.props.style)
      });
    } // Render a wrapping div around all children if there is more than one child.
    else {
      return jsx("div", {
        className: imgClasses,
        style: customImgDimension,
        children: children
      });
    }
  };

  return jsx("div", _extends$1({
    "aria-label": "Avatar photo"
  }, props, {
    "data-theme": dataTheme,
    className: containerClasses,
    ref: ref,
    children: renderAvatarContents()
  }));
});
var Avatar$1 = Object.assign(Avatar, {
  Group: AvatarGroup
});

var _excluded$18 = ["children", "variant", "size", "color", "responsive", "dataTheme", "className"];
var Badge = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var _clsx;

  var children = _ref.children,
      variant = _ref.variant,
      size = _ref.size,
      color = _ref.color,
      responsive = _ref.responsive,
      dataTheme = _ref.dataTheme,
      className = _ref.className,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$18);

  var classes = twMerge('badge', className, clsx((_clsx = {}, _clsx["badge-" + size] = size, _clsx["badge-" + variant] = variant, _clsx["badge-" + color] = color, _clsx['badge-xs md:badge-sm lg:badge-md xl:badge-lg'] = responsive, _clsx)));
  return jsx("div", _extends$1({
    "aria-label": "Badge"
  }, props, {
    "data-theme": dataTheme,
    className: classes,
    ref: ref,
    children: children
  }));
});
Badge.displayName = 'Badge';

var _excluded$17 = ["className"];
var CardActions = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var className = _ref.className,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$17);

  return jsx("div", _extends$1({}, props, {
    className: twMerge('card-actions', className),
    ref: ref
  }));
});

var _excluded$16 = ["className"];
var CardBody = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var className = _ref.className,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$16);

  return jsx("div", _extends$1({}, props, {
    className: twMerge('card-body', className),
    ref: ref
  }));
});

var _excluded$15 = ["className", "tag"];
var CardTitle = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var className = _ref.className,
      _ref$tag = _ref.tag,
      tag = _ref$tag === void 0 ? 'div' : _ref$tag,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$15);

  var Tag = tag;
  return jsx(Tag, _extends$1({}, props, {
    className: twMerge('card-title', className),
    ref: ref
  }));
});

var CardImage = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var props = _extends$1({}, _ref);

  return jsx("figure", {
    ref: ref,
    children: jsx("img", _extends$1({}, props))
  });
});

var _excluded$14 = ["bordered", "imageFull", "normal", "compact", "side", "className"];
var DYNAMIC_MODIFIERS$1 = {
  compact: {
    "true": 'card-compact',
    xs: 'xs:card-compact',
    sm: 'sm:card-compact',
    md: 'md:card-compact',
    lg: 'lg:card-compact'
  },
  normal: {
    "true": 'card-normal',
    xs: 'xs:card-normal',
    sm: 'sm:card-normal',
    md: 'md:card-normal',
    lg: 'lg:card-normal'
  },
  side: {
    "true": 'card-side',
    xs: 'xs:card-side',
    sm: 'sm:card-side',
    md: 'md:card-side',
    lg: 'lg:card-side'
  }
};
var Card = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var _clsx;

  var _ref$bordered = _ref.bordered,
      bordered = _ref$bordered === void 0 ? true : _ref$bordered,
      imageFull = _ref.imageFull,
      normal = _ref.normal,
      compact = _ref.compact,
      side = _ref.side,
      className = _ref.className,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$14);

  var classes = twMerge('card', className, clsx((_clsx = {
    'card-bordered': bordered,
    'image-full': imageFull
  }, _clsx[compact && DYNAMIC_MODIFIERS$1.compact[compact.toString()] || ''] = compact, _clsx[normal && DYNAMIC_MODIFIERS$1.normal[normal.toString()] || ''] = normal, _clsx[side && DYNAMIC_MODIFIERS$1.side[side.toString()] || ''] = side, _clsx)));
  return jsx("div", _extends$1({
    "aria-label": "Card"
  }, props, {
    className: classes,
    ref: ref
  }));
});
var Card$1 = Object.assign(Card, {
  Actions: CardActions,
  Body: CardBody,
  Title: CardTitle,
  Image: CardImage
});

var _excluded$13 = ["children", "innerRef", "src", "alt", "index", "width", "hasButtons", "buttonStyle", "onPrev", "onNext", "className"];

var CarouselItem = function CarouselItem(_ref) {
  var children = _ref.children,
      innerRef = _ref.innerRef,
      src = _ref.src,
      alt = _ref.alt,
      _ref$index = _ref.index,
      index = _ref$index === void 0 ? 0 : _ref$index,
      width = _ref.width,
      hasButtons = _ref.hasButtons,
      buttonStyle = _ref.buttonStyle,
      onPrev = _ref.onPrev,
      onNext = _ref.onNext,
      className = _ref.className,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$13);

  var classes = twMerge('carousel-item relative', className, clsx({
    'w-full': width === 'full',
    'w-1/2': width === 'half',
    'h-full': true
  }));
  var imageClasses = clsx({
    'w-full': width === 'full'
  });

  var renderButtons = function renderButtons() {
    if (buttonStyle != null) {
      return jsxs(Fragment, {
        children: [/*#__PURE__*/cloneElement(buttonStyle('❮'), {
          onClick: onPrev
        }), /*#__PURE__*/cloneElement(buttonStyle('❯'), {
          onClick: onNext
        })]
      });
    }

    return jsxs(Fragment, {
      children: [jsx(Button, {
        onClick: onPrev,
        shape: "circle",
        children: "\u276E"
      }), jsx(Button, {
        onClick: onNext,
        shape: "circle",
        children: "\u276F"
      })]
    });
  };

  return jsxs("div", _extends$1({}, props, {
    id: "item" + index,
    ref: innerRef,
    className: classes,
    children: [src ? jsx("img", {
      src: src,
      alt: alt,
      className: imageClasses
    }) : children, hasButtons && jsx("div", {
      className: "absolute flex justify-between transform -translate-y-1/2 left-5 right-5 top-1/2",
      children: renderButtons()
    })]
  }));
};

var _excluded$12 = ["children", "display", "snap", "vertical", "width", "buttonStyle", "dataTheme", "className"];
var Carousel = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var _clsx;

  var children = _ref.children,
      _ref$display = _ref.display,
      display = _ref$display === void 0 ? 'slider' : _ref$display,
      snap = _ref.snap,
      vertical = _ref.vertical,
      width = _ref.width,
      buttonStyle = _ref.buttonStyle,
      dataTheme = _ref.dataTheme,
      className = _ref.className,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$12);

  var classes = twMerge('carousel', className, clsx((_clsx = {}, _clsx["carousel-" + snap] = snap, _clsx['carousel-vertical'] = vertical, _clsx['w-full'] = display !== 'slider', _clsx)));

  var _useState = useState([]),
      itemRefs = _useState[0],
      setItemRefs = _useState[1];

  var _useState2 = useState(0),
      activeIndex = _useState2[0],
      setActiveIndex = _useState2[1];

  useEffect(function () {
    var newRefs = [];
    children.map(function (_) {
      newRefs.push( /*#__PURE__*/createRef());
    });
    setItemRefs(newRefs);
  }, [children]);

  var scrollToIndex = function scrollToIndex(index) {
    var _itemRefs$index$curre;

    (_itemRefs$index$curre = itemRefs[index].current) == null ? void 0 : _itemRefs$index$curre.scrollIntoView({
      behavior: 'smooth',
      block: 'nearest',
      inline: snap
    });
    setActiveIndex(index);
  };

  return jsxs(Fragment, {
    children: [jsx("div", _extends$1({
      role: "listbox",
      "aria-label": "Image carousel"
    }, props, {
      ref: ref,
      "data-theme": dataTheme,
      className: classes,
      children: children.map(function (child, i) {
        return /*#__PURE__*/cloneElement(child, _extends$1({
          key: i,
          innerRef: itemRefs[i],
          index: i + 1,
          children: child.props.children,
          src: child.props.src,
          alt: child.props.alt,
          width: display !== 'slider' ? 'full' : width,
          hasButtons: display === 'sequential',
          buttonStyle: buttonStyle,
          onPrev: function onPrev() {
            return scrollToIndex(i - 1 < 0 ? children.length - 1 : i - 1);
          },
          onNext: function onNext() {
            return scrollToIndex(i + 1 > children.length - 1 ? 0 : i + 1);
          }
        }, child.props));
      })
    })), display === 'numbered' && jsx("div", {
      className: "flex justify-center w-full py-2 gap-2",
      children: children.map(function (_, i) {
        if (buttonStyle != null) {
          return /*#__PURE__*/cloneElement(buttonStyle((i + 1).toString()), {
            key: i,
            onClick: function onClick() {
              return scrollToIndex(i);
            }
          });
        }

        return jsx(Button, {
          active: i === activeIndex,
          onClick: function onClick() {
            return scrollToIndex(i);
          },
          children: i + 1
        }, i);
      })
    })]
  });
});
var Carousel$1 = Object.assign(Carousel, {
  Item: CarouselItem
});

var _excluded$11 = ["size", "shape", "className"];
var ChatBubbleAvatar = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var _ref$size = _ref.size,
      size = _ref$size === void 0 ? 'xs' : _ref$size,
      _ref$shape = _ref.shape,
      shape = _ref$shape === void 0 ? 'circle' : _ref$shape,
      className = _ref.className,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$11);

  return jsx(Avatar$1, _extends$1({
    size: size,
    shape: shape
  }, props, {
    className: twMerge('chat-image', className),
    ref: ref
  }));
});

var _excluded$10 = ["color", "className"];
var ChatBubbleMessage = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var _clsx;

  var color = _ref.color,
      className = _ref.className,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$10);

  var classes = twMerge('chat-bubble', clsx((_clsx = {}, _clsx["chat-bubble-" + color] = color, _clsx)), className);
  return jsx("div", _extends$1({}, props, {
    className: classes,
    ref: ref
  }));
});

var _excluded$$ = ["className"];
var ChatBubbleHeader = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var className = _ref.className,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$$);

  return jsx("div", _extends$1({}, props, {
    className: twMerge('chat-header', className),
    ref: ref
  }));
});

var _excluded$_ = ["className"];
var ChatBubbleTime = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var className = _ref.className,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$_);

  return jsx("time", _extends$1({}, props, {
    className: twMerge('text-xs opacity-50', className),
    ref: ref
  }));
});

var _excluded$Z = ["className"];
var ChatBubbleFooter = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var className = _ref.className,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$Z);

  return jsx("div", _extends$1({}, props, {
    className: twMerge('chat-footer opacity-50', className),
    ref: ref
  }));
});

var _excluded$Y = ["end", "color", "dataTheme", "className", "children"];
var ChatBubble = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var _ref$end = _ref.end,
      end = _ref$end === void 0 ? false : _ref$end,
      dataTheme = _ref.dataTheme,
      className = _ref.className,
      children = _ref.children,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$Y);

  return jsx("div", _extends$1({}, props, {
    "data-theme": dataTheme,
    className: twMerge('chat', "chat-" + (end ? 'end' : 'start'), className),
    ref: ref,
    children: children
  }));
});
ChatBubble.displayName = 'ChatBubble';
var ChatBubble$1 = Object.assign(ChatBubble, {
  Header: ChatBubbleHeader,
  Time: ChatBubbleTime,
  Avatar: ChatBubbleAvatar,
  Message: ChatBubbleMessage,
  Footer: ChatBubbleFooter
});

var _excluded$X = ["children", "className"];

var CollapseTitle = function CollapseTitle(_ref) {
  var children = _ref.children,
      className = _ref.className,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$X);

  var classes = twMerge('collapse-title', className);
  return jsx("div", _extends$1({}, props, {
    className: classes,
    children: children
  }));
};

var _excluded$W = ["children", "className"];

var CollapseContent = function CollapseContent(_ref) {
  var children = _ref.children,
      className = _ref.className,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$W);

  var classes = twMerge('collapse-content', className);
  return jsx("div", _extends$1({}, props, {
    className: classes,
    children: children
  }));
};

var _excluded$V = ["children", "checkbox", "icon", "open", "dataTheme", "className", "onOpen", "onClose", "onToggle"];
var Collapse = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var _clsx;

  var children = _ref.children,
      checkbox = _ref.checkbox,
      icon = _ref.icon,
      open = _ref.open,
      dataTheme = _ref.dataTheme,
      className = _ref.className,
      onOpen = _ref.onOpen,
      onClose = _ref.onClose,
      onToggle = _ref.onToggle,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$V);

  var classes = twMerge('collapse', className, clsx((_clsx = {}, _clsx["collapse-" + icon] = icon, _clsx['collapse-open'] = open === true, _clsx['collapse-close'] = open === false, _clsx)));

  var _useState = useState(open),
      isChecked = _useState[0],
      setIsChecked = _useState[1];

  var checkboxRef = useRef(null); // Handle events for checkbox changes

  var handleCheckboxChange = function handleCheckboxChange() {
    var _checkboxRef$current, _checkboxRef$current2, _checkboxRef$current3;

    if (onToggle) {
      onToggle();
    }

    if (onOpen && (_checkboxRef$current = checkboxRef.current) != null && _checkboxRef$current.checked) {
      onOpen();
    } else if (onClose && !((_checkboxRef$current2 = checkboxRef.current) != null && _checkboxRef$current2.checked)) {
      onClose();
    }

    setIsChecked((_checkboxRef$current3 = checkboxRef.current) == null ? void 0 : _checkboxRef$current3.checked);
  }; // Handle blur events, specifically handling open/close for non checkbox types


  var handleBlur = function handleBlur(event) {
    if (!checkbox && onToggle) onToggle();
    if (!checkbox && onClose) onClose();
    if (props.onBlur) props.onBlur(event);
  }; // Handle focus events, specifically handling open/close for non checkbox types


  var handleFocus = function handleFocus(event) {
    if (!checkbox && onToggle) onToggle();
    if (!checkbox && onOpen) onOpen();
    if (props.onFocus) props.onFocus(event);
  };

  return jsxs("div", _extends$1({
    "aria-expanded": open
  }, props, {
    ref: ref,
    tabIndex: isChecked === true ? undefined : 0,
    "data-theme": dataTheme,
    className: classes,
    onBlur: handleBlur,
    onFocus: handleFocus,
    children: [checkbox && jsx("input", {
      type: "checkbox",
      tabIndex: isChecked === true ? 0 : undefined,
      className: "peer",
      ref: checkboxRef,
      onChange: handleCheckboxChange
    }), children]
  }));
});
var Collapse$1 = Object.assign(Collapse, {
  Title: CollapseTitle,
  Content: CollapseContent
});

var _excluded$U = ["value", "dataTheme", "className"];

var Countdown = function Countdown(_ref) {
  var value = _ref.value,
      dataTheme = _ref.dataTheme,
      className = _ref.className,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$U);

  var classes = twMerge('countdown', className);
  var displayedValue = Math.min(99, Math.max(0, value));
  var countdownStyle = {
    '--value': displayedValue
  };
  return jsx("span", _extends$1({
    role: "timer"
  }, props, {
    "data-theme": dataTheme,
    className: classes,
    children: jsx("span", {
      style: countdownStyle
    })
  }));
};

var _excluded$T = ["children", "size", "dataTheme", "className"];
var Kbd = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var _clsx;

  var children = _ref.children,
      size = _ref.size,
      dataTheme = _ref.dataTheme,
      className = _ref.className,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$T);

  var classes = twMerge('kbd', className, clsx((_clsx = {}, _clsx["kbd-" + size] = size, _clsx)));
  return jsx("kbd", _extends$1({}, props, {
    "data-theme": dataTheme,
    className: classes,
    ref: ref,
    children: children
  }));
});

var _excluded$S = ["color", "dataTheme", "className"];
var Progress = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var _clsx;

  var color = _ref.color,
      dataTheme = _ref.dataTheme,
      className = _ref.className,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$S);

  var classes = twMerge('progress', className, clsx((_clsx = {}, _clsx["progress-" + color] = color, _clsx)));
  return jsx("progress", _extends$1({}, props, {
    ref: ref,
    "data-theme": dataTheme,
    className: classes
  }));
});
Progress.displayName = 'Progress';

var _excluded$R = ["value", "size", "thickness", "color", "dataTheme", "className", "children"];
var RadialProgress = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var _clsx;

  var value = _ref.value,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? '4rem' : _ref$size,
      _ref$thickness = _ref.thickness,
      thickness = _ref$thickness === void 0 ? '4px' : _ref$thickness,
      color = _ref.color,
      dataTheme = _ref.dataTheme,
      className = _ref.className,
      children = _ref.children,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$R);

  var classes = twMerge('radial-progress', className, clsx((_clsx = {}, _clsx["text-" + color] = color, _clsx)));
  var displayedValue = Math.min(100, Math.max(0, value));
  var progressStyle = {
    '--value': displayedValue,
    '--size': size,
    '--thickness': thickness
  };
  return jsx("div", _extends$1({
    role: "progressbar",
    "aria-valuenow": displayedValue,
    "aria-valuemin": 0,
    "aria-valuemax": 100
  }, props, {
    ref: ref,
    "data-theme": dataTheme,
    className: classes,
    style: progressStyle,
    children: children
  }));
});
RadialProgress.displayName = 'RadialProgress';

var _excluded$Q = ["variant", "className"];
var StatItem = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var _clsx;

  var variant = _ref.variant,
      className = _ref.className,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$Q);

  var classes = twMerge(className, clsx((_clsx = {}, _clsx["stat-" + variant] = variant, _clsx)));
  return jsx("div", _extends$1({}, props, {
    className: classes,
    ref: ref
  }));
});

var _excluded$P = ["dataTheme", "className"];
var Stat = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var dataTheme = _ref.dataTheme,
      className = _ref.className,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$P);

  var classes = twMerge('stat', className);
  return jsx("div", _extends$1({}, props, {
    "data-theme": dataTheme,
    className: classes,
    ref: ref
  }));
});
var Stat$1 = Object.assign(Stat, {
  Item: StatItem
});

var _excluded$O = ["horizontal", "vertical", "dataTheme", "className", "children"];
var Stats = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var horizontal = _ref.horizontal,
      vertical = _ref.vertical,
      dataTheme = _ref.dataTheme,
      className = _ref.className,
      children = _ref.children,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$O);

  var classes = twMerge('stats', className, clsx({
    'stats-horizontal': horizontal,
    'stats-vertical': vertical
  }));
  return jsx("div", _extends$1({}, props, {
    ref: ref,
    "data-theme": dataTheme,
    className: classes,
    children: children
  }));
});
var Stats$1 = Object.assign(Stats, {
  Stat: Stat$1
});

var _excluded$N = ["children"];
var TableHead = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var children = _ref.children,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$N);

  return jsx("thead", _extends$1({}, props, {
    ref: ref,
    children: jsx("tr", {
      children: children == null ? void 0 : children.map(function (child, i) {
        return jsx("th", {
          children: child
        }, i);
      })
    })
  }));
});

var _excluded$M = ["children"];
var TableBody = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var children = _ref.children,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$M);

  return jsx("tbody", _extends$1({}, props, {
    ref: ref,
    children: children
  }));
});

var _excluded$L = ["children", "active", "hover", "className"];
var TableRow = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var children = _ref.children,
      active = _ref.active,
      hover = _ref.hover,
      className = _ref.className,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$L);

  var classes = twMerge(className, clsx({
    active: active,
    hover: hover
  }));
  return jsx("tr", _extends$1({}, props, {
    className: classes,
    ref: ref,
    children: children == null ? void 0 : children.map(function (child, i) {
      return i < 1 ? jsx("th", {
        children: child
      }, i) : jsx("td", {
        children: child
      }, i);
    })
  }));
});

var _excluded$K = ["children"];
var TableFooter = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var children = _ref.children,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$K);

  return jsx("tfoot", _extends$1({}, props, {
    ref: ref,
    children: jsx("tr", {
      children: children == null ? void 0 : children.map(function (child, i) {
        return jsx("th", {
          children: child
        }, i);
      })
    })
  }));
});

var _excluded$J = ["children", "compact", "zebra", "dataTheme", "className"];
var Table = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var children = _ref.children,
      compact = _ref.compact,
      zebra = _ref.zebra,
      dataTheme = _ref.dataTheme,
      className = _ref.className,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$J);

  var classes = twMerge('table', className, clsx({
    'table-zebra': zebra,
    'table-compact': compact
  }));
  return jsx("table", _extends$1({}, props, {
    "data-theme": dataTheme,
    className: classes,
    ref: ref,
    children: children
  }));
});
var Table$1 = Object.assign(Table, {
  Head: TableHead,
  Body: TableBody,
  Row: TableRow,
  Footer: TableFooter
});

var _excluded$I = ["message", "children", "open", "color", "position", "dataTheme", "className"];
var Tooltip = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var _clsx;

  var message = _ref.message,
      children = _ref.children,
      open = _ref.open,
      color = _ref.color,
      position = _ref.position,
      dataTheme = _ref.dataTheme,
      className = _ref.className,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$I);

  var classes = twMerge('tooltip', className, clsx((_clsx = {
    'tooltip-open': open
  }, _clsx["tooltip-" + color] = color, _clsx['tooltip-top'] = position === 'top', _clsx['tooltip-bottom'] = position === 'bottom', _clsx['tooltip-left'] = position === 'left', _clsx['tooltip-right'] = position === 'right', _clsx)));
  return jsx("div", _extends$1({
    role: "tooltip"
  }, props, {
    ref: ref,
    "data-theme": dataTheme,
    "data-tip": message,
    className: classes,
    children: children
  }));
});
Tooltip.displayName = 'Tooltip';

var _excluded$H = ["children", "title", "dataTheme", "className"];
var Label = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var children = _ref.children,
      title = _ref.title,
      className = _ref.className,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$H);

  var classes = twMerge('label', className);
  return jsxs("label", _extends$1({}, props, {
    className: classes,
    children: [jsx("span", {
      className: "label-text cursor-pointer",
      ref: ref,
      children: title
    }), children]
  }));
});

var _excluded$G = ["children", "dataTheme", "className"];
var Form = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var children = _ref.children,
      dataTheme = _ref.dataTheme,
      className = _ref.className,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$G);

  var classes = twMerge('form-control', className);
  return jsx("form", _extends$1({
    role: "form"
  }, props, {
    "data-theme": dataTheme,
    className: classes,
    ref: ref,
    children: children
  }));
});
var Form$1 = Object.assign(Form, {
  Label: Label
});

var _excluded$F = ["color", "size", "indeterminate", "dataTheme", "className"];
var Checkbox = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var _clsx;

  var color = _ref.color,
      size = _ref.size,
      indeterminate = _ref.indeterminate,
      dataTheme = _ref.dataTheme,
      className = _ref.className,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$F);

  var classes = twMerge('checkbox', className, clsx((_clsx = {}, _clsx["checkbox-" + size] = size, _clsx["checkbox-" + color] = color, _clsx)));
  var checkboxRef = useRef(null);
  useImperativeHandle(ref, function () {
    return checkboxRef.current;
  });
  useEffect(function () {
    if (!checkboxRef.current) {
      return;
    }

    if (indeterminate) {
      checkboxRef.current.indeterminate = true;
    } else {
      checkboxRef.current.indeterminate = false;
    }
  }, [indeterminate]);
  return jsx("input", _extends$1({}, props, {
    ref: checkboxRef,
    type: "checkbox",
    "data-theme": dataTheme,
    className: classes
  }));
});
Checkbox.displayName = 'Checkbox';

var _excluded$E = ["value", "placeholder", "bordered", "borderOffset", "size", "color", "dataTheme", "className", "type"];
var Input = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var _clsx;

  var value = _ref.value,
      placeholder = _ref.placeholder,
      _ref$bordered = _ref.bordered,
      bordered = _ref$bordered === void 0 ? true : _ref$bordered,
      borderOffset = _ref.borderOffset,
      size = _ref.size,
      color = _ref.color,
      dataTheme = _ref.dataTheme,
      className = _ref.className,
      type = _ref.type,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$E);

  var classes = twMerge('input', className, clsx((_clsx = {}, _clsx["input-" + size] = size, _clsx["input-" + color] = color, _clsx["focus:outline-offset-0"] = !borderOffset, _clsx['input-bordered'] = bordered, _clsx)));
  return jsx("input", _extends$1({}, props, {
    ref: ref,
    type: type,
    value: value,
    placeholder: placeholder,
    "data-theme": dataTheme,
    className: classes
  }));
});
Input.displayName = 'Input';

var _excluded$D = ["color", "size", "name", "dataTheme", "className"];
var Radio = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var _clsx;

  var color = _ref.color,
      size = _ref.size,
      name = _ref.name,
      dataTheme = _ref.dataTheme,
      className = _ref.className,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$D);

  var classes = twMerge('radio', className, clsx((_clsx = {}, _clsx["radio-" + size] = size, _clsx["radio-" + color] = color, _clsx)));
  return jsx("input", _extends$1({}, props, {
    ref: ref,
    type: "radio",
    name: name,
    "data-theme": dataTheme,
    className: classes
  }));
});
Radio.displayName = 'Radio';

var _excluded$C = ["color", "size", "step", "dataTheme", "className"];
var Range = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var _clsx;

  var color = _ref.color,
      size = _ref.size,
      step = _ref.step,
      dataTheme = _ref.dataTheme,
      className = _ref.className,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$C);

  var classes = twMerge('range', className, clsx((_clsx = {}, _clsx["range-" + size] = size, _clsx["range-" + color] = color, _clsx)));

  var isNumeric = function isNumeric(n) {
    return !isNaN(parseFloat(n)) && isFinite(n);
  };

  var numSteps = useMemo(function () {
    var _Math$ceil;

    var safeStep = Math.max(1, Number(step));
    return (_Math$ceil = Math.ceil(100 / safeStep)) != null ? _Math$ceil : 1;
  }, [props.max, step]);
  return jsxs(Fragment, {
    children: [jsx("input", _extends$1({}, props, {
      ref: ref,
      type: "range",
      step: step,
      "data-theme": dataTheme,
      className: classes
    })), isNumeric(step) && jsx("div", {
      className: "w-full flex justify-between text-xs px-2",
      children: [].concat(Array(numSteps + 1)).map(function (_, i) {
        return jsx("span", {
          children: "|"
        }, i);
      })
    })]
  });
});
Range.displayName = 'Range';

var RatingItem = function RatingItem(_ref) {
  var props = _extends$1({}, _ref);

  return jsx("input", _extends$1({}, props, {
    type: "checkbox"
  }));
};

var _excluded$B = ["children", "size", "half", "hidden", "dataTheme", "className", "value", "onChange"];
var Rating = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var _clsx;

  var children = _ref.children,
      size = _ref.size,
      half = _ref.half,
      hidden = _ref.hidden,
      dataTheme = _ref.dataTheme,
      className = _ref.className,
      value = _ref.value,
      _onChange = _ref.onChange,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$B);

  var classes = twMerge('rating', className, clsx((_clsx = {}, _clsx["rating-" + size] = size, _clsx['rating-half'] = half, _clsx['rating-hidden'] = hidden || value === 0, _clsx)));
  return jsxs("div", _extends$1({
    "aria-label": "Rating"
  }, props, {
    ref: ref,
    "data-theme": dataTheme,
    className: classes,
    children: [value === 0 && jsx(RatingItem, {
      className: clsx(classes, 'hidden'),
      checked: true,
      readOnly: true
    }), React.Children.map(children, function (child, index) {
      var childComponent = child;
      return /*#__PURE__*/React.cloneElement(childComponent, {
        key: index + value,
        checked: value === index + 1,
        readOnly: _onChange == null,
        onChange: function onChange() {
          _onChange == null ? void 0 : _onChange(index + 1);
        }
      });
    })]
  }));
});
var Rating$1 = Object.assign(Rating, {
  Item: RatingItem
});

var _excluded$A = ["value", "children"];

var SelectOption = function SelectOption(_ref) {
  var value = _ref.value,
      children = _ref.children,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$A);

  return jsx("option", _extends$1({}, props, {
    value: value,
    children: children
  }));
};

var _excluded$z = ["children", "value", "onChange", "size", "color", "bordered", "borderOffset", "dataTheme", "className"];

var SelectInner = function SelectInner(props, ref) {
  var _clsx;

  var children = props.children,
      value = props.value,
      _onChange = props.onChange,
      size = props.size,
      color = props.color,
      _props$bordered = props.bordered,
      bordered = _props$bordered === void 0 ? true : _props$bordered,
      borderOffset = props.borderOffset,
      dataTheme = props.dataTheme,
      className = props.className,
      rest = _objectWithoutPropertiesLoose(props, _excluded$z);

  var classes = twMerge('select', className, clsx((_clsx = {}, _clsx["select-" + size] = size, _clsx["select-" + color] = color, _clsx["focus:outline-offset-0"] = !borderOffset, _clsx['select-bordered'] = bordered, _clsx)));
  return jsx("select", _extends$1({}, rest, {
    ref: ref,
    "data-theme": dataTheme,
    className: classes,
    onChange: function onChange(e) {
      return _onChange == null ? void 0 : _onChange(e.currentTarget.value);
    },
    value: value,
    children: children
  }));
}; // Make forwardRef work with generic component


var Select = /*#__PURE__*/React.forwardRef(SelectInner);
var Select$1 = Object.assign(Select, {
  Option: SelectOption
});

var _excluded$y = ["color", "size", "dataTheme", "className"];
var Toggle = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var _clsx;

  var color = _ref.color,
      size = _ref.size,
      dataTheme = _ref.dataTheme,
      className = _ref.className,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$y);

  var classes = twMerge('toggle', className, clsx((_clsx = {}, _clsx["toggle-" + size] = size, _clsx["toggle-" + color] = color, _clsx)));
  return jsx("input", _extends$1({}, props, {
    ref: ref,
    type: "checkbox",
    "data-theme": dataTheme,
    className: classes
  }));
});
Toggle.displayName = 'Toggle';

var _excluded$x = ["bordered", "borderOffset", "color", "dataTheme", "className"];
var Textarea = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var _clsx;

  var _ref$bordered = _ref.bordered,
      bordered = _ref$bordered === void 0 ? true : _ref$bordered,
      borderOffset = _ref.borderOffset,
      color = _ref.color,
      dataTheme = _ref.dataTheme,
      className = _ref.className,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$x);

  var classes = twMerge('textarea', className, clsx((_clsx = {}, _clsx["textarea-" + color] = color, _clsx["focus:outline-offset-0"] = !borderOffset, _clsx['textarea-bordered'] = bordered, _clsx)));
  return jsx("textarea", _extends$1({}, props, {
    "data-theme": dataTheme,
    className: classes,
    ref: ref
  }));
});

var _excluded$w = ["className", "size", "color", "bordered", "dataTheme"];
var FileInput = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var _clsx;

  var className = _ref.className,
      size = _ref.size,
      color = _ref.color,
      bordered = _ref.bordered,
      dataTheme = _ref.dataTheme,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$w);

  var classes = twMerge('file-input', className, clsx((_clsx = {}, _clsx["file-input-" + size] = size, _clsx["file-input-" + color] = color, _clsx['file-input-bordered'] = bordered, _clsx)));
  return jsx("input", _extends$1({}, props, {
    ref: ref,
    type: "file",
    "data-theme": dataTheme,
    className: classes
  }));
});
FileInput.displayName = 'FileInput';

var _excluded$v = ["children", "size", "horizontal", "dataTheme", "className"];
var Artboard = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var _clsx;

  var children = _ref.children,
      size = _ref.size,
      horizontal = _ref.horizontal,
      dataTheme = _ref.dataTheme,
      className = _ref.className,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$v);

  var classes = twMerge('artboard', 'artboard-demo', className, clsx((_clsx = {}, _clsx["phone-" + size] = size, _clsx.horizontal = horizontal, _clsx)));
  return jsx("div", _extends$1({
    "aria-label": "Artboard"
  }, props, {
    ref: ref,
    "data-theme": dataTheme,
    className: classes,
    children: children
  }));
});
Artboard.displayName = 'Artboard';

var _excluded$u = ["vertical", "children", "dataTheme", "className"];
var ButtonGroup = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var vertical = _ref.vertical,
      children = _ref.children,
      dataTheme = _ref.dataTheme,
      className = _ref.className,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$u);

  var classes = twMerge('btn-group', className, clsx({
    'btn-group-vertical': vertical
  }));
  return jsx("div", _extends$1({
    "aria-label": "Group of " + children.length + " buttons"
  }, props, {
    "data-theme": dataTheme,
    className: classes,
    ref: ref,
    children: children
  }));
});

var _excluded$t = ["children", "vertical", "dataTheme", "className"];

var Divider = function Divider(_ref) {
  var children = _ref.children,
      vertical = _ref.vertical,
      dataTheme = _ref.dataTheme,
      className = _ref.className,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$t);

  var classes = twMerge('divider', className, clsx({
    'divider-vertical': vertical
  }));
  return jsx("div", _extends$1({
    role: "separator"
  }, props, {
    "data-theme": dataTheme,
    className: classes,
    children: children
  }));
};

var _excluded$s = ["children", "side", "open", "mobile", "end", "dataTheme", "className", "toggleClassName", "contentClassName", "sideClassName", "overlayClassName", "onClickOverlay"];

var Drawer = function Drawer(_ref) {
  var children = _ref.children,
      side = _ref.side,
      open = _ref.open,
      mobile = _ref.mobile,
      end = _ref.end,
      dataTheme = _ref.dataTheme,
      className = _ref.className,
      toggleClassName = _ref.toggleClassName,
      contentClassName = _ref.contentClassName,
      sideClassName = _ref.sideClassName,
      overlayClassName = _ref.overlayClassName,
      onClickOverlay = _ref.onClickOverlay,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$s);

  var classes = twMerge('drawer', className, clsx({
    'drawer-mobile': mobile,
    'drawer-end': end
  }));
  return jsxs("div", _extends$1({
    "aria-expanded": open
  }, props, {
    "data-theme": dataTheme,
    className: classes,
    children: [jsx("input", {
      type: "checkbox",
      className: clsx('drawer-toggle', toggleClassName),
      checked: open,
      readOnly: true
    }), jsx("div", {
      className: clsx('drawer-content', contentClassName),
      children: children
    }), jsxs("div", {
      className: clsx('drawer-side', sideClassName),
      children: [jsx("label", {
        className: clsx('drawer-overlay', overlayClassName),
        onClick: onClickOverlay
      }), side]
    })]
  }));
};

var _excluded$r = ["className"];
var FooterTitle = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var className = _ref.className,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$r);

  var classes = twMerge('footer-title', className);
  return jsx("span", _extends$1({}, props, {
    className: classes,
    ref: ref
  }));
});

var _excluded$q = ["center", "dataTheme", "className"];
var Footer = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var center = _ref.center,
      dataTheme = _ref.dataTheme,
      className = _ref.className,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$q);

  var classes = twMerge('footer', className, clsx({
    'footer-center': center
  }));
  return jsx("div", _extends$1({
    role: "contentinfo"
  }, props, {
    "data-theme": dataTheme,
    className: classes,
    ref: ref
  }));
});
var Footer$1 = Object.assign(Footer, {
  Title: FooterTitle
});

var _excluded$p = ["dataTheme", "className", "children"];
var HeroContent = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var dataTheme = _ref.dataTheme,
      className = _ref.className,
      children = _ref.children,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$p);

  var classes = twMerge('hero-content', className);
  return jsx("div", _extends$1({}, props, {
    "data-theme": dataTheme,
    className: classes,
    ref: ref,
    children: children
  }));
});

var _excluded$o = ["dataTheme", "className", "children"];
var HeroOverlay = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var dataTheme = _ref.dataTheme,
      className = _ref.className,
      children = _ref.children,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$o);

  var classes = twMerge('hero-overlay', className);
  return jsx("div", _extends$1({}, props, {
    "data-theme": dataTheme,
    className: classes,
    ref: ref,
    children: children
  }));
});

var _excluded$n = ["dataTheme", "className", "children"];
var Hero = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var dataTheme = _ref.dataTheme,
      className = _ref.className,
      children = _ref.children,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$n);

  var classes = twMerge('hero', className);
  return jsx("div", _extends$1({
    role: "banner"
  }, props, {
    "data-theme": dataTheme,
    className: classes,
    ref: ref,
    children: children
  }));
});
var Hero$1 = Object.assign(Hero, {
  Content: HeroContent,
  Overlay: HeroOverlay
});

var _excluded$m = ["children", "item", "horizontal", "vertical", "dataTheme", "className", "innerRef"];
var Indicator = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var _clsx;

  var children = _ref.children,
      item = _ref.item,
      _ref$horizontal = _ref.horizontal,
      horizontal = _ref$horizontal === void 0 ? 'end' : _ref$horizontal,
      _ref$vertical = _ref.vertical,
      vertical = _ref$vertical === void 0 ? 'top' : _ref$vertical,
      dataTheme = _ref.dataTheme,
      className = _ref.className,
      innerRef = _ref.innerRef,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$m);

  var classes = twMerge('indicator-item', className, clsx((_clsx = {}, _clsx["indicator-" + horizontal] = horizontal, _clsx["indicator-" + vertical] = vertical, _clsx)));
  return jsxs("div", {
    "data-theme": dataTheme,
    className: "indicator",
    ref: ref,
    children: [jsx("div", _extends$1({
      "aria-label": "Indicator"
    }, props, {
      className: classes,
      ref: innerRef,
      children: item
    })), children]
  });
});

var _excluded$l = ["children", "size", "vertical", "dataTheme", "className"];
var InputGroup = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var _clsx;

  var children = _ref.children,
      size = _ref.size,
      vertical = _ref.vertical,
      dataTheme = _ref.dataTheme,
      className = _ref.className,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$l);

  var classes = twMerge('input-group', className, clsx((_clsx = {}, _clsx["input-group-" + size] = size, _clsx['input-group-vertical'] = vertical, _clsx)));
  return jsx("label", _extends$1({}, props, {
    "data-theme": dataTheme,
    className: classes,
    ref: ref,
    children: children
  }));
});
InputGroup.displayName = 'InputGroup';

var _excluded$k = ["src", "variant", "dataTheme", "className"];
var Mask = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var _clsx;

  var src = _ref.src,
      variant = _ref.variant,
      dataTheme = _ref.dataTheme,
      className = _ref.className,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$k);

  var classes = twMerge('mask', className, clsx((_clsx = {}, _clsx["mask-" + variant] = variant, _clsx)));
  return jsx("img", _extends$1({}, props, {
    "data-theme": dataTheme,
    className: classes,
    src: src,
    ref: ref
  }));
});

var _excluded$j = ["dataTheme", "className", "children"];
var Stack = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var dataTheme = _ref.dataTheme,
      className = _ref.className,
      children = _ref.children,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$j);

  var classes = twMerge('stack', className);
  return jsx("div", _extends$1({
    "aria-label": "Stack"
  }, props, {
    ref: ref,
    "data-theme": dataTheme,
    className: classes,
    children: children
  }));
});
Stack.displayName = 'Stack';

var _excluded$i = ["horizontal", "vertical", "className", "children"];
var horizontalOptions = {
  start: 'toast-start',
  center: 'toast-center',
  end: 'toast-end'
};
var verticalOptions = {
  top: 'toast-top',
  middle: 'toast-middle',
  bottom: 'toast-bottom'
};
var Toast = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var _ref$horizontal = _ref.horizontal,
      horizontal = _ref$horizontal === void 0 ? 'end' : _ref$horizontal,
      _ref$vertical = _ref.vertical,
      vertical = _ref$vertical === void 0 ? 'bottom' : _ref$vertical,
      className = _ref.className,
      children = _ref.children,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$i);

  return jsx("div", _extends$1({}, props, {
    className: twMerge('toast', horizontalOptions[horizontal], verticalOptions[vertical], className),
    ref: ref,
    children: children
  }));
});
Toast.displayName = 'Toast';

var _excluded$h = ["children", "href"];
var BreadcrumbsItem = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var children = _ref.children,
      href = _ref.href,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$h);

  return jsx("li", _extends$1({
    role: "link"
  }, props, {
    ref: ref,
    children: href ? jsx("a", {
      href: href,
      children: children
    }) : jsx(Fragment, {
      children: children
    })
  }));
});

var _excluded$g = ["children", "dataTheme", "className", "innerProps", "innerRef"];
var Breadcrumbs = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var children = _ref.children,
      dataTheme = _ref.dataTheme,
      className = _ref.className,
      innerProps = _ref.innerProps,
      innerRef = _ref.innerRef,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$g);

  var classes = twMerge('breadcrumbs', 'text-sm', className);
  return jsx("div", _extends$1({
    role: "navigation",
    "aria-label": "Breadcrumbs"
  }, props, {
    "data-theme": dataTheme,
    className: classes,
    ref: ref,
    children: jsx("ul", _extends$1({}, innerProps, {
      ref: innerRef,
      children: children
    }))
  }));
});
var Breadcrumbs$1 = Object.assign(Breadcrumbs, {
  Item: BreadcrumbsItem
});

var _excluded$f = ["children", "className"];
var BottomNavigationLabel = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var children = _ref.children,
      className = _ref.className,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$f);

  var classes = twMerge('btm-nav-label', className);
  return jsx("span", _extends$1({}, props, {
    className: classes,
    ref: ref,
    children: children
  }));
});

var _excluded$e = ["size", "dataTheme", "className", "children"];
var BottomNavigation = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var _clsx;

  var size = _ref.size,
      dataTheme = _ref.dataTheme,
      className = _ref.className,
      children = _ref.children,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$e);

  var classes = twMerge('btm-nav', clsx((_clsx = {}, _clsx["btm-nav-" + size] = size, _clsx)), className);
  return jsx("div", _extends$1({}, props, {
    "data-theme": dataTheme,
    className: classes,
    ref: ref,
    children: children
  }));
});
BottomNavigation.displayName = 'BottomNavigation';
var BottomNavigation$1 = Object.assign(BottomNavigation, {
  Label: BottomNavigationLabel
});

var _excluded$d = ["children", "href", "color", "hover", "dataTheme", "className"];
var Link = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var _clsx;

  var children = _ref.children,
      href = _ref.href,
      color = _ref.color,
      _ref$hover = _ref.hover,
      hover = _ref$hover === void 0 ? true : _ref$hover,
      dataTheme = _ref.dataTheme,
      className = _ref.className,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$d);

  var classes = twMerge('link', className, clsx((_clsx = {}, _clsx["link-" + color] = color, _clsx['link-hover'] = hover, _clsx)));
  return jsx("a", _extends$1({
    rel: "noopener noreferrer"
  }, props, {
    href: href,
    "data-theme": dataTheme,
    className: classes,
    ref: ref,
    children: children
  }));
});
Link.displayName = 'Link';

var _excluded$c = ["className"];
var MenuTitle = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var className = _ref.className,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$c);

  var classes = twMerge('menu-title', className);
  return jsx("li", _extends$1({}, props, {
    className: classes,
    ref: ref
  }));
});

var _excluded$b = ["className", "disabled"];
var MenuItem = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var className = _ref.className,
      disabled = _ref.disabled,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$b);

  var classes = twMerge(className, clsx({
    disabled: disabled
  }));
  return jsx("li", _extends$1({
    role: "menuitem",
    className: classes
  }, props, {
    ref: ref
  }));
});

var _excluded$a = ["normal", "compact", "horizontal", "vertical", "dataTheme", "className"];
var DYNAMIC_MODIFIERS = {
  compact: {
    "true": 'menu-compact',
    xs: 'xs:menu-compact',
    sm: 'sm:menu-compact',
    md: 'md:menu-compact',
    lg: 'lg:menu-compact'
  },
  normal: {
    "true": 'menu-normal',
    xs: 'xs:menu-normal',
    sm: 'sm:menu-normal',
    md: 'md:menu-normal',
    lg: 'lg:menu-normal'
  },
  horizontal: {
    "true": 'menu-horizontal',
    xs: 'xs:menu-horizontal',
    sm: 'sm:menu-horizontal',
    md: 'md:menu-horizontal',
    lg: 'lg:menu-horizontal'
  },
  vertical: {
    "true": 'menu-vertical',
    xs: 'xs:menu-vertical',
    sm: 'sm:menu-vertical',
    md: 'md:menu-vertical',
    lg: 'lg:menu-vertical'
  }
};
var Menu = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var _clsx;

  var normal = _ref.normal,
      compact = _ref.compact,
      horizontal = _ref.horizontal,
      vertical = _ref.vertical,
      dataTheme = _ref.dataTheme,
      className = _ref.className,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$a);

  var classes = twMerge('menu', className, clsx((_clsx = {}, _clsx[compact && DYNAMIC_MODIFIERS.compact[compact.toString()] || ''] = compact, _clsx[normal && DYNAMIC_MODIFIERS.normal[normal.toString()] || ''] = normal, _clsx[horizontal && DYNAMIC_MODIFIERS.horizontal[horizontal.toString()] || ''] = horizontal, _clsx[vertical && DYNAMIC_MODIFIERS.vertical[vertical.toString()] || ''] = vertical, _clsx)));
  return jsx("ul", _extends$1({
    role: "menu",
    "data-theme": dataTheme,
    className: classes
  }, props, {
    ref: ref
  }));
});
var Menu$1 = Object.assign(Menu, {
  Title: MenuTitle,
  Item: MenuItem
});

var NavbarSection = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var _clsx;

  var children = _ref.children,
      section = _ref.section,
      dataTheme = _ref.dataTheme,
      className = _ref.className,
      style = _ref.style;
  var classes = twMerge(className, clsx((_clsx = {}, _clsx['flex-1'] = section !== 'center', _clsx["navbar-" + section] = section, _clsx)));
  return jsx("div", {
    "data-theme": dataTheme,
    className: classes,
    style: style,
    ref: ref,
    children: children
  });
});

var _excluded$9 = ["children", "dataTheme", "className"];
var Navbar = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var children = _ref.children,
      dataTheme = _ref.dataTheme,
      className = _ref.className,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$9);

  var classes = twMerge('navbar', className);
  return jsx("div", _extends$1({
    role: "navigation",
    "aria-label": "Navbar"
  }, props, {
    "data-theme": dataTheme,
    className: classes,
    ref: ref,
    children: children
  }));
});
var NavbarStart = /*#__PURE__*/React.forwardRef(function (props, ref) {
  return jsx(NavbarSection, _extends$1({}, props, {
    section: "start",
    ref: ref
  }));
});
var NavbarCenter = /*#__PURE__*/React.forwardRef(function (props, ref) {
  return jsx(NavbarSection, _extends$1({}, props, {
    section: "center",
    ref: ref
  }));
});
var NavbarEnd = /*#__PURE__*/React.forwardRef(function (props, ref) {
  return jsx(NavbarSection, _extends$1({}, props, {
    section: "end",
    ref: ref
  }));
});
var Navbar$1 = Object.assign(Navbar, {
  Start: NavbarStart,
  Center: NavbarCenter,
  End: NavbarEnd
});

var Pagination = ButtonGroup;

var _excluded$8 = ["children", "value", "color", "dataTheme", "className"];
var Step = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var _clsx;

  var children = _ref.children,
      value = _ref.value,
      color = _ref.color,
      dataTheme = _ref.dataTheme,
      className = _ref.className,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$8);

  var classes = twMerge('step', className, clsx((_clsx = {}, _clsx["step-" + color] = color, _clsx)));
  return jsx("li", _extends$1({
    "aria-label": "Step"
  }, props, {
    "data-theme": dataTheme,
    "data-content": value,
    className: classes,
    ref: ref,
    children: children
  }));
});

var _excluded$7 = ["children", "dataTheme", "className", "vertical", "horizontal"];
var Steps = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var _clsx;

  var children = _ref.children,
      dataTheme = _ref.dataTheme,
      className = _ref.className,
      vertical = _ref.vertical,
      horizontal = _ref.horizontal,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$7);

  var classes = twMerge('steps', className, clsx((_clsx = {}, _clsx['steps-vertical'] = vertical, _clsx['steps-horizontal'] = horizontal, _clsx)));
  return jsx("ul", _extends$1({
    "aria-label": "Steps",
    role: "group"
  }, props, {
    "data-theme": dataTheme,
    className: classes,
    ref: ref,
    children: children
  }));
});
var Steps$1 = Object.assign(Steps, {
  Step: Step
});

var _excluded$6 = ["children", "value", "activeValue", "onClick", "size", "variant", "className", "style"];

var TabInner = function TabInner(_ref, ref) {
  var _clsx;

  var children = _ref.children,
      value = _ref.value,
      activeValue = _ref.activeValue,
      _onClick = _ref.onClick,
      size = _ref.size,
      variant = _ref.variant,
      className = _ref.className,
      style = _ref.style,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$6);

  var classes = twMerge('tab', className, clsx((_clsx = {
    'tab-active': value != null && value === activeValue
  }, _clsx["tab-" + size] = size, _clsx["tab-" + variant] = variant, _clsx)));
  return jsx("a", _extends$1({
    role: "tab"
  }, props, {
    className: classes,
    style: style,
    onClick: function onClick() {
      return _onClick && _onClick(value);
    },
    children: children
  }));
}; // Make forwardRef work with generic component


var Tab = /*#__PURE__*/React.forwardRef(TabInner);

var _excluded$5 = ["children", "value", "onChange", "variant", "size", "boxed", "dataTheme", "className"];

var TabsInner = function TabsInner(_ref, ref) {
  var children = _ref.children,
      value = _ref.value,
      onChange = _ref.onChange,
      variant = _ref.variant,
      size = _ref.size,
      boxed = _ref.boxed,
      dataTheme = _ref.dataTheme,
      className = _ref.className,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$5);

  var classes = twMerge('tabs', className, clsx({
    'tabs-boxed': boxed
  }));
  return jsx("div", _extends$1({
    ref: ref,
    role: "tablist"
  }, props, {
    "data-theme": dataTheme,
    className: classes,
    children: children.map(function (child, index) {
      return /*#__PURE__*/cloneElement(child, {
        key: child.props.value,
        variant: variant,
        size: size,
        activeValue: value,
        onClick: function onClick(value) {
          onChange && onChange(value);
        }
      });
    })
  }));
}; // Make forwardRef work with generic component


var Tabs = /*#__PURE__*/React.forwardRef(TabsInner);
var Tabs$1 = Object.assign(Tabs, {
  Tab: Tab
});

var _excluded$4 = ["dataPrefix", "dataTheme", "status", "className", "children", "innerProps", "innerRef"];
var CodeMockupLine = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var _clsx;

  var dataPrefix = _ref.dataPrefix,
      dataTheme = _ref.dataTheme,
      status = _ref.status,
      className = _ref.className,
      children = _ref.children,
      innerProps = _ref.innerProps,
      innerRef = _ref.innerRef,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$4);

  var classes = twMerge(clsx((_clsx = {}, _clsx["bg-" + status] = status, _clsx["text-" + status + "-content"] = status, _clsx)), className);

  var allProps = _extends$1({}, props, {
    className: classes
  }, dataPrefix !== false && {
    'data-prefix': dataPrefix || '>'
  });

  return jsx("pre", _extends$1({}, allProps, {
    "data-theme": dataTheme,
    className: classes,
    ref: ref,
    children: jsx("code", _extends$1({}, innerProps, {
      ref: innerRef,
      children: children
    }))
  }));
});
CodeMockupLine.displayName = 'CodeMockup.Line';

var _excluded$3 = ["dataTheme", "className", "children"];
var CodeMockup = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var dataTheme = _ref.dataTheme,
      className = _ref.className,
      children = _ref.children,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$3);

  var classes = twMerge('mockup-code', className);
  return jsx("div", _extends$1({
    "aria-label": "Code mockup"
  }, props, {
    "data-theme": dataTheme,
    className: classes,
    ref: ref,
    children: React.Children.map(children, function (child, index) {
      var childComponent = child;
      return /*#__PURE__*/React.cloneElement(childComponent, {
        key: index
      });
    })
  }));
});
CodeMockup.displayName = 'CodeMockup';
var CodeMockupNamespace = Object.assign(CodeMockup, {
  Line: CodeMockupLine
});

var _excluded$2 = ["color", "dataTheme", "className", "children", "innerRef", "innerProps"];
var PhoneMockup = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var _clsx;

  var color = _ref.color,
      dataTheme = _ref.dataTheme,
      className = _ref.className,
      children = _ref.children,
      innerRef = _ref.innerRef,
      innerProps = _ref.innerProps,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$2);

  var classes = twMerge('mockup-phone', clsx((_clsx = {}, _clsx["border-" + color] = color, _clsx)), className);
  return jsxs("div", _extends$1({
    "aria-label": "Phone mockup"
  }, props, {
    "data-theme": dataTheme,
    className: classes,
    ref: ref,
    children: [jsx("div", {
      className: "camera"
    }), jsx("div", {
      className: "display",
      children: jsx("div", _extends$1({}, innerProps, {
        className: twMerge('artboard artboard-demo phone-1', innerProps == null ? void 0 : innerProps.className),
        ref: innerRef,
        children: children
      }))
    })]
  }));
});
PhoneMockup.displayName = 'PhoneMockup';

var defaultTheme = 'light';

var _excluded$1 = ["border", "borderColor", "backgroundColor", "frameColor", "dataTheme", "className", "children"];
var WindowMockup = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var _clsx;

  var border = _ref.border,
      borderColor = _ref.borderColor,
      backgroundColor = _ref.backgroundColor,
      frameColor = _ref.frameColor,
      dataTheme = _ref.dataTheme,
      className = _ref.className,
      children = _ref.children,
      props = _objectWithoutPropertiesLoose(_ref, _excluded$1);

  // Set border color to framecolor or 'bg-base-300', if border color is not defined
  var borderColorValue = borderColor ? borderColor : frameColor || 'base-300';
  var classes = twMerge('mockup-window', border && "border border-" + borderColorValue, clsx((_clsx = {}, _clsx["border-" + borderColorValue] = borderColorValue, _clsx["bg-" + frameColor] = frameColor, _clsx)), className); // If border is true, then we need to add the border-t and padding classes to the children
  // if more than one child is passed in, or the single child is not a valid element, then we need to wrap the child/children in a div

  var numChildren = React.Children.count(children);
  var firstChild = numChildren > 0 && React.Children.toArray(children)[0]; // List of classes that child element will have

  var innerClasses = clsx(backgroundColor && "bg-" + backgroundColor, border && "border-t border-" + borderColorValue, 'p-4'); // Add the innerClasses to the child element, merging classNames if existing, or wrapping with div and adding innerClasses

  var innerEl = firstChild && /*#__PURE__*/React.isValidElement(firstChild) ? /*#__PURE__*/React.cloneElement(firstChild, {
    className: twMerge(innerClasses, firstChild.props.className)
  }) : jsx("div", {
    className: innerClasses,
    children: children
  });
  return jsx("div", _extends$1({
    "aria-label": "Window mockup"
  }, props, {
    "data-theme": dataTheme,
    className: classes,
    ref: ref,
    children: innerEl
  }));
});
WindowMockup.displayName = 'WindowMockup';

var ThemeContext = /*#__PURE__*/React.createContext({
  theme: 'light',
  setTheme: function setTheme() {}
});

var getThemeFromClosestAncestor = function getThemeFromClosestAncestor(ref) {
  if (!ref.current) return;
  var matches = ref.current.closest('[data-theme]');
  if (matches) return matches.getAttribute('data-theme');
};

var _excluded = ["children", "dataTheme", "onChange", "className"];
var Theme = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var children = _ref.children,
      dataTheme = _ref.dataTheme,
      onChange = _ref.onChange,
      className = _ref.className,
      props = _objectWithoutPropertiesLoose(_ref, _excluded);

  // Either use provided ref or create a new ref
  var themeRef = useRef(ref == null ? void 0 : ref.current);
  var closestAncestorTheme = getThemeFromClosestAncestor(themeRef); // If no theme is provided, use the closest ancestor theme, if no ancestor theme, fallback to default theme (defined in constants)

  var _useState = useState(dataTheme || closestAncestorTheme || defaultTheme),
      theme = _useState[0],
      setTheme = _useState[1];

  var handleThemeChange = function handleThemeChange(theme) {
    // Fire custom onChange, if provided. ie, user provided function to store theme in session/local storage
    onChange && onChange(theme); // Update state/context

    setTheme(theme);
  }; // Properly handle changes to theme prop on Theme component


  useEffect(function () {
    if (dataTheme !== theme) {
      dataTheme && handleThemeChange(dataTheme);
    }
  }, [dataTheme]);
  return jsx(ThemeContext.Provider, {
    value: {
      theme: theme,
      setTheme: handleThemeChange
    },
    children: jsx("div", _extends$1({}, props, {
      "data-theme": theme,
      className: className,
      ref: themeRef,
      children: children
    }))
  });
});

var useTheme = function useTheme(value) {
  var _useContext = useContext(ThemeContext),
      theme = _useContext.theme,
      setTheme = _useContext.setTheme;

  useEffect(function () {
    if (value && theme !== value) {
      setTheme(value);
    }
  }, [value]);
  return {
    theme: theme,
    setTheme: setTheme
  };
};

export { Alert, Artboard, Avatar$1 as Avatar, Badge, BottomNavigation$1 as BottomNavigation, Breadcrumbs$1 as Breadcrumbs, Button, ButtonGroup, Card$1 as Card, Carousel$1 as Carousel, ChatBubble$1 as ChatBubble, Checkbox, CodeMockupNamespace as CodeMockup, Collapse$1 as Collapse, Countdown, Divider, Drawer, Dropdown$1 as Dropdown, FileInput, Footer$1 as Footer, Form$1 as Form, Hero$1 as Hero, Indicator, Input, InputGroup, Kbd, Link, Mask, Menu$1 as Menu, Modal$1 as Modal, Navbar$1 as Navbar, Pagination, PhoneMockup, Progress, RadialProgress, Radio, Range, Rating$1 as Rating, Select$1 as Select, Stack, Stats$1 as Stats, Steps$1 as Steps, Swap, Table$1 as Table, Tabs$1 as Tabs, Textarea, Theme, Toast, Toggle, Tooltip, WindowMockup, useTheme };
//# sourceMappingURL=react-daisyui.esm.js.map
