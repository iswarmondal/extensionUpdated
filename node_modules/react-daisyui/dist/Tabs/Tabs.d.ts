import React, { ReactElement } from 'react';
import { IComponentBaseProps, ComponentSize } from '../types';
import { TabProps } from './Tab';
export declare type TabsProps<T> = Omit<React.HTMLAttributes<HTMLDivElement>, 'onChange'> & IComponentBaseProps & {
    children: ReactElement<TabProps<T>>[];
    value?: T;
    onChange?: (value: T) => void;
    variant?: 'bordered' | 'lifted';
    size?: ComponentSize;
    boxed?: boolean;
};
declare const _default: (<T>(props: Omit<React.HTMLAttributes<HTMLDivElement>, "onChange"> & IComponentBaseProps & {
    children: React.ReactElement<TabProps<T>, string | React.JSXElementConstructor<any>>[];
    value?: T | undefined;
    onChange?: ((value: T) => void) | undefined;
    variant?: "bordered" | "lifted" | undefined;
    size?: "lg" | "md" | "sm" | "xs" | undefined;
    boxed?: boolean | undefined;
} & {
    ref?: React.ForwardedRef<HTMLDivElement> | undefined;
}) => JSX.Element) & {
    Tab: <T_1>(props: Omit<React.AnchorHTMLAttributes<HTMLAnchorElement>, "onClick"> & {
        value: T_1;
        activeValue?: T_1 | undefined;
        onClick?: ((value: T_1) => void) | undefined;
        size?: "lg" | "md" | "sm" | "xs" | undefined;
        variant?: "bordered" | "lifted" | undefined;
    } & {
        ref?: React.ForwardedRef<HTMLAnchorElement> | undefined;
    }) => JSX.Element;
};
export default _default;
