import React from 'react';
import { ComponentSize } from '../types';
export declare type TabProps<T> = Omit<React.AnchorHTMLAttributes<HTMLAnchorElement>, 'onClick'> & {
    value: T;
    activeValue?: T;
    onClick?: (value: T) => void;
    size?: ComponentSize;
    variant?: 'bordered' | 'lifted';
};
declare const TabInner: <T extends string | number | undefined>({ children, value, activeValue, onClick, size, variant, className, style, ...props }: TabProps<T>, ref?: React.ForwardedRef<T> | undefined) => JSX.Element;
declare const Tab: <T>(props: Omit<React.AnchorHTMLAttributes<HTMLAnchorElement>, "onClick"> & {
    value: T;
    activeValue?: T | undefined;
    onClick?: ((value: T) => void) | undefined;
    size?: "lg" | "md" | "sm" | "xs" | undefined;
    variant?: "bordered" | "lifted" | undefined;
} & {
    ref?: React.ForwardedRef<HTMLAnchorElement> | undefined;
}) => ReturnType<typeof TabInner>;
export default Tab;
