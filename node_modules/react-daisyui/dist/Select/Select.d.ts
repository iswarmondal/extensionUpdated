import React, { ReactElement } from 'react';
import { IComponentBaseProps, ComponentColor, ComponentSize } from '../types';
import { SelectOptionProps } from './SelectOption';
export declare type SelectOption<T> = {
    value: T;
    label: string;
};
export declare type SelectProps<T> = Omit<React.SelectHTMLAttributes<HTMLSelectElement>, 'onChange' | 'value' | 'size' | 'color'> & IComponentBaseProps & {
    children: ReactElement<SelectOptionProps<T>>[];
    value?: T;
    onChange?: (value: T) => void;
    size?: ComponentSize;
    color?: ComponentColor;
    bordered?: boolean;
    borderOffset?: boolean;
};
declare const _default: (<T>(props: Omit<React.SelectHTMLAttributes<HTMLSelectElement>, "onChange" | "value" | "size" | "color"> & IComponentBaseProps & {
    children: React.ReactElement<SelectOptionProps<T>, string | React.JSXElementConstructor<any>>[];
    value?: T | undefined;
    onChange?: ((value: T) => void) | undefined;
    size?: "lg" | "md" | "sm" | "xs" | undefined;
    color?: "primary" | "secondary" | "accent" | "ghost" | "info" | "success" | "warning" | "error" | undefined;
    bordered?: boolean | undefined;
    borderOffset?: boolean | undefined;
} & {
    ref?: React.ForwardedRef<HTMLSelectElement> | undefined;
}) => JSX.Element) & {
    Option: <T_1 extends string | number | undefined>({ value, children, ...props }: SelectOptionProps<T_1>) => JSX.Element;
};
export default _default;
